Decls:
  class \My: { policied_props = [mInt, other] }
  class \Other: { policied_props = [oBool] }
  function \My#__construct: { kind = public }
  function \My#getMInt: { kind = public }
  function \My#setMInt: { kind = public }
  function \tlGetMyInt: { kind = public }
  function \tlGetOther: { kind = public }
  function \tlGetOtherBool: { kind = public }
  function \tlSetMyInt: { kind = public }
  function \tlSetOtherBool: { kind = public }
  
Analyzing __construct:
* pc: pc
* This:
    \My<\My, lump, mInt=<.mInt>,
          other=\Other<\Other'1, lump'2, oBool=<.oBool>>>
* Return: <ret>
* Params:
    { $mBool -> <$mBool>;
      $mInt -> <$mInt>;
      $other -> \Other<\Other, lump'1, oBool=<.oBool'1>> }
* Final environment:
  Deps: {}
  Locals:
    { $mBool -> <$mBool>;
      $mInt -> <$mInt>;
      $other -> \Other<\Other, lump'1, oBool=<.oBool'1>> }
  Constraints:
    [\My < .mInt, $mInt < .mInt, pc < .mInt, \My < \Other'1,
     .oBool < .oBool'1, .oBool'1 < .oBool, lump'1 = lump'2,
     \Other < \Other'1, pc < \Other'1, \My < lump, $mBool < lump, pc < lump]

Analyzing getMInt:
* pc: pc
* This: \My<\My, lump, mInt=<.mInt>, other=?thunk>
* Return: <ret>
* Params: {}
* Final environment:
  Deps: {}
  Locals: {}
  Constraints:
    [.mInt < .mInt'1, \My < .mInt'1, .mInt'1 < ret]

Analyzing setMInt:
* pc: pc
* This: \My<\My, lump, mInt=<.mInt>, other=?thunk>
* Return: <ret>
* Params: { $candidate -> <$candidate> }
* Final environment:
  Deps: {}
  Locals: { $candidate -> <$candidate> }
  Constraints:
    [\My < .mInt, $candidate < .mInt, pc < .mInt]

Analyzing \tlGetMyInt:
* pc: pc
* This: None
* Return: <ret>
* Params: { $obj -> \My<\My, lump, mInt=<.mInt>, other=?thunk> }
* Final environment:
  Deps: {}
  Locals: { $obj -> \My<\My, lump, mInt=<.mInt>, other=?thunk> }
  Constraints:
    [.mInt < .mInt'1, \My < .mInt'1, .mInt'1 < ret]

Analyzing \tlSetMyInt:
* pc: pc
* This: None
* Return: <ret>
* Params:
    { $obj -> \My<\My, lump, mInt=<.mInt>, other=?thunk>; $val -> <$val> }
* Final environment:
  Deps: {}
  Locals:
    { $obj -> \My<\My, lump, mInt=<.mInt>, other=?thunk>; $val -> <$val> }
  Constraints:
    [\My < .mInt, $val < .mInt, pc < .mInt]

Analyzing \tlGetOther:
* pc: pc
* This: None
* Return: \Other<\Other, lump, oBool=<.oBool>>
* Params:
    { $obj ->
      \My<\My, lump'1, mInt=?thunk,
            other=\Other<\Other'1, lump'2, oBool=<.oBool'1>>> }
* Final environment:
  Deps: {}
  Locals:
    { $obj ->
      \My<\My, lump'1, mInt=?thunk,
            other=\Other<\Other'1, lump'2, oBool=<.oBool'1>>> }
  Constraints:
    [\Other'1 < .other, \My < .other, .oBool < .oBool'1, .oBool'1 < .oBool,
     lump'2 = lump, .other < \Other]

Analyzing \tlGetOtherBool:
* pc: pc
* This: None
* Return: <ret>
* Params:
    { $obj ->
      \My<\My, lump, mInt=?thunk,
            other=\Other<\Other, lump'1, oBool=<.oBool>>> }
* Final environment:
  Deps: {}
  Locals:
    { $obj ->
      \My<\My, lump, mInt=?thunk,
            other=\Other<\Other, lump'1, oBool=<.oBool>>> }
  Constraints:
    [\Other < .other, \My < .other, .oBool < .oBool'1, .other < .oBool'1,
     .oBool'1 < ret]

Analyzing \tlSetOtherBool:
* pc: pc
* This: None
* Return: <ret>
* Params:
    { $bool -> <$bool>;
      $obj ->
      \My<\My, lump, mInt=?thunk,
            other=\Other<\Other, lump'1, oBool=<.oBool>>> }
* Final environment:
  Deps: {}
  Locals:
    { $bool -> <$bool>;
      $obj ->
      \My<\My, lump, mInt=?thunk,
            other=\Other<\Other, lump'1, oBool=<.oBool>>> }
  Constraints:
    [\Other < .other, \My < .other, .other < .oBool, $bool < .oBool,
     pc < .oBool]

Global solving:
  Flows for \My#__construct:
    [\My < .mInt, $mInt < .mInt, pc < .mInt, \My < \Other'1,
     .oBool < .oBool'1, .oBool'1 < .oBool, lump'1 = lump'2,
     \Other < \Other'1, pc < \Other'1, \My < lump, $mBool < lump, pc < lump]
    simplified: True
  Flows for \My#getMInt:
    [.mInt < .mInt'1, \My < .mInt'1, .mInt'1 < ret]
    simplified: True
  Flows for \My#setMInt:
    [\My < .mInt, $candidate < .mInt, pc < .mInt]
    simplified: True
  Flows for \tlGetMyInt:
    [.mInt < .mInt'1, \My < .mInt'1, .mInt'1 < ret]
    simplified: True
  Flows for \tlGetOther:
    [\Other'1 < .other, \My < .other, .oBool < .oBool'1, .oBool'1 < .oBool,
     lump'2 = lump, .other < \Other]
    simplified: True
  Flows for \tlGetOtherBool:
    [\Other < .other, \My < .other, .oBool < .oBool'1, .other < .oBool'1,
     .oBool'1 < ret]
    simplified: True
  Flows for \tlSetMyInt:
    [\My < .mInt, $val < .mInt, pc < .mInt]
    simplified: True
  Flows for \tlSetOtherBool:
    [\Other < .other, \My < .other, .other < .oBool, $bool < .oBool,
     pc < .oBool]
    simplified: True
  
