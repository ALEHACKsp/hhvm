Decls:
  class \C: { policied_props = [cx] }
  class \D: { policied_props = [] }
  class \Exception: { policied_props = [] }
  class \HH\vec: { policied_props = [] }
  function \C#__construct: { kind = public }
  function \C#testGetUnpolicied: { kind = public }
  function \C#testSetDeep: { kind = public }
  function \C#testSetMultipleUnpolicied: { kind = public }
  function \D#__construct: { kind = public }
  
Analyzing __construct:
* pc: pc
* This: \C<\C, lump'1, cx=<.cx>>
* Return: <ret>
* Exception: \Exception<\Exception, lump>
* Params:
  lvars: { $cd -> \D<\D, lump'2>; $cx -> <$cx>; $cy -> <$cy> }
* Final environment:
  Deps: {}
  Locals:
    lvars: { $cd -> \D<\D, lump'2>; $cx -> <$cx>; $cy -> <$cy> }
Constraints:
  [\C < .cx, $cx < .cx, pc < .cx, \C < lump'1, $cy < lump'1, pc < lump'1,
   \C < lump'1, lump'2 = lump'1, \D < lump'1, pc < lump'1]

Analyzing testGetUnpolicied:
* pc: pc
* This: \C<\C, lump'1, cx=?thunk>
* Return: \D<\D, lump'2>
* Exception: \Exception<\Exception, lump>
* Params:
  lvars: {}
* Final environment:
  Deps: {}
  Locals:
    lvars: {}
Constraints:
  [lump'1 < .cd, \C < .cd, lump'1 = lump'2, .cd < \D]

Analyzing testSetMultipleUnpolicied:
* pc: pc
* This: \C<\C, lump'1, cx=?thunk>
* Return: <ret>
* Exception: \Exception<\Exception, lump>
* Params:
  lvars: { $d -> \D<\D, lump'2> }
* Final environment:
  Deps: {}
  Locals:
    lvars: { $d -> \D<\D, lump'2> }
Constraints:
  [\C < lump'1, PUBLIC < lump'1, pc < lump'1, \C < lump'1, lump'2 = lump'1,
   \D < lump'1, pc < lump'1]

Analyzing testSetDeep:
* pc: pc
* This: \C<\C, lump'1, cx=?thunk>
* Return: <ret>
* Exception: \Exception<\Exception, lump>
* Params:
  lvars: { $i -> <$i> }
* Final environment:
  Deps: {}
  Locals:
    lvars: { $i -> <$i> }
Constraints:
  [lump'1 < .cd, \C < .cd, .cd < lump'1, $i < lump'1, pc < lump'1]

Analyzing __construct:
* pc: pc
* This: \D<\D, lump'1>
* Return: <ret>
* Exception: \Exception<\Exception, lump>
* Params:
  lvars: { $di -> <$di> }
* Final environment:
  Deps: {}
  Locals:
    lvars: { $di -> <$di> }
Constraints:
  [\D < lump'1, $di < lump'1, pc < lump'1]

Flow constraints for \C#__construct:
  
  Simplified: True
  Raw:
  [\C < .cx, $cx < .cx, pc < .cx, \C < lump'1, $cy < lump'1, pc < lump'1,
   \C < lump'1, lump'2 = lump'1, \D < lump'1, pc < lump'1]

Flow constraints for \C#testGetUnpolicied:
  
  Simplified: True
  Raw: [lump'1 < .cd, \C < .cd, lump'1 = lump'2, .cd < \D]

Flow constraints for \C#testSetDeep:
  
  Simplified: True
  Raw: [lump'1 < .cd, \C < .cd, .cd < lump'1, $i < lump'1, pc < lump'1]


Flow constraints for \C#testSetMultipleUnpolicied:
  
  Simplified: True
  Raw:
  [\C < lump'1, PUBLIC < lump'1, pc < lump'1, \C < lump'1, lump'2 = lump'1,
   \D < lump'1, pc < lump'1]

Flow constraints for \D#__construct:
  
  Simplified: True
  Raw: [\D < lump'1, $di < lump'1, pc < lump'1]

Lattice:
 {}

