Decls:
  class \HH\vec: { policied_props = [] }
  class \R: { policied_props = [] }
  function \R#__construct: { kind = public }
  function \R#recursiveGet: { kind = public }
  function \R#recursiveWrite: { kind = public }
  
Analyzing __construct:
* This: \R<\R, lump>
* Return: <ret>
* Params:
  lvars: { $prop -> <$prop>; $r -> \R<\R'1, lump'1> }
  pc: pc
* Final environment:
  Deps: {}
  Locals:
    lvars: { $prop -> <$prop>; $r -> \R<\R'1, lump'1> }
    pc: pc
Constraints:
  [\R < lump, $prop < lump, pc < lump, \R < lump, lump'1 = lump, \R'1 < lump,
   pc < lump]

Analyzing recursiveGet:
* This: \R<\R, lump>
* Return: <ret>
* Params:
  lvars: {}
  pc: pc
* Final environment:
  Deps: {}
  Locals:
    lvars: {}
    pc: pc
Constraints:
  [lump < .r, \R < .r, lump < .r'1, .r < .r'1, lump < .r'2, .r'1 < .r'2,
   lump < .prop, .r'2 < .prop, .prop < ret]

Analyzing recursiveWrite:
* This: \R<\R, lump>
* Return: <ret>
* Params:
  lvars: {}
  pc: pc
* Final environment:
  Deps: {}
  Locals:
    lvars: {}
    pc: pc
Constraints:
  [lump < .r, \R < .r, lump < .r'1, .r < .r'1, lump < .r'2, .r'1 < .r'2,
   .r'2 < lump, PUBLIC < lump, pc < lump]

Flow constraints for \R#__construct:
  
  Simplified: True
  Raw:
  [\R < lump, $prop < lump, pc < lump, \R < lump, lump'1 = lump, \R'1 < lump,
   pc < lump]

Flow constraints for \R#recursiveGet:
  
  Simplified: True
  Raw:
  [lump < .r, \R < .r, lump < .r'1, .r < .r'1, lump < .r'2, .r'1 < .r'2,
   lump < .prop, .r'2 < .prop, .prop < ret]

Flow constraints for \R#recursiveWrite:
  
  Simplified: True
  Raw:
  [lump < .r, \R < .r, lump < .r'1, .r < .r'1, lump < .r'2, .r'1 < .r'2,
   .r'2 < lump, PUBLIC < lump, pc < lump]

