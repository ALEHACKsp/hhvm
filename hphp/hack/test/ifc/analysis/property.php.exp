Decls:
  class \HH\vec: { policied_props = [] }
  class \My: { policied_props = [mInt, other] }
  class \Other: { policied_props = [oBool] }
  function \My#__construct: { kind = public }
  function \My#getMInt: { kind = public }
  function \My#setMInt: { kind = public }
  function \tlGetMyInt: { kind = public }
  function \tlGetOther: { kind = public }
  function \tlGetOtherBool: { kind = public }
  function \tlSetMyInt: { kind = public }
  function \tlSetOtherBool: { kind = public }
  
Analyzing __construct:
* This:
    \My<\My, lump, mInt=<.mInt>,
          other=\Other<\Other'1, lump'2, oBool=<.oBool>>>
* Return: <ret>
* Params:
  lvars:
    { $mBool -> <$mBool>;
      $mInt -> <$mInt>;
      $other -> \Other<\Other, lump'1, oBool=<.oBool'1>> }
  pc: pc
* Final environment:
  Deps: {}
  Locals:
    lvars:
      { $mBool -> <$mBool>;
        $mInt -> <$mInt>;
        $other -> \Other<\Other, lump'1, oBool=<.oBool'1>> }
    pc: pc
Constraints:
  [\My < .mInt, $mInt < .mInt, pc < .mInt, \My < \Other'1, .oBool < .oBool'1,
   .oBool'1 < .oBool, lump'1 = lump'2, \Other < \Other'1, pc < \Other'1,
   \My < lump, $mBool < lump, pc < lump]

Analyzing getMInt:
* This: \My<\My, lump, mInt=<.mInt>, other=?thunk>
* Return: <ret>
* Params:
  lvars: {}
  pc: pc
* Final environment:
  Deps: {}
  Locals:
    lvars: {}
    pc: pc
Constraints:
  [.mInt < .mInt'1, \My < .mInt'1, .mInt'1 < ret]

Analyzing setMInt:
* This: \My<\My, lump, mInt=<.mInt>, other=?thunk>
* Return: <ret>
* Params:
  lvars: { $candidate -> <$candidate> }
  pc: pc
* Final environment:
  Deps: {}
  Locals:
    lvars: { $candidate -> <$candidate> }
    pc: pc
Constraints:
  [\My < .mInt, $candidate < .mInt, pc < .mInt]

Analyzing \tlGetMyInt:
* This: None
* Return: <ret>
* Params:
  lvars: { $obj -> \My<\My, lump, mInt=<.mInt>, other=?thunk> }
  pc: pc
* Final environment:
  Deps: {}
  Locals:
    lvars: { $obj -> \My<\My, lump, mInt=<.mInt>, other=?thunk> }
    pc: pc
Constraints:
  [.mInt < .mInt'1, \My < .mInt'1, .mInt'1 < ret]

Analyzing \tlSetMyInt:
* This: None
* Return: <ret>
* Params:
  lvars:
    { $obj -> \My<\My, lump, mInt=<.mInt>, other=?thunk>; $val -> <$val> }
  pc: pc
* Final environment:
  Deps: {}
  Locals:
    lvars:
      { $obj -> \My<\My, lump, mInt=<.mInt>, other=?thunk>; $val -> <$val> }
    pc: pc
Constraints:
  [\My < .mInt, $val < .mInt, pc < .mInt]

Analyzing \tlGetOther:
* This: None
* Return: \Other<\Other, lump, oBool=<.oBool>>
* Params:
  lvars:
    { $obj ->
      \My<\My, lump'1, mInt=?thunk,
            other=\Other<\Other'1, lump'2, oBool=<.oBool'1>>> }
  pc: pc
* Final environment:
  Deps: {}
  Locals:
    lvars:
      { $obj ->
        \My<\My, lump'1, mInt=?thunk,
              other=\Other<\Other'1, lump'2, oBool=<.oBool'1>>> }
    pc: pc
Constraints:
  [\Other'1 < .other, \My < .other, .oBool < .oBool'1, .oBool'1 < .oBool,
   lump'2 = lump, .other < \Other]

Analyzing \tlGetOtherBool:
* This: None
* Return: <ret>
* Params:
  lvars:
    { $obj ->
      \My<\My, lump, mInt=?thunk,
            other=\Other<\Other, lump'1, oBool=<.oBool>>> }
  pc: pc
* Final environment:
  Deps: {}
  Locals:
    lvars:
      { $obj ->
        \My<\My, lump, mInt=?thunk,
              other=\Other<\Other, lump'1, oBool=<.oBool>>> }
    pc: pc
Constraints:
  [\Other < .other, \My < .other, .oBool < .oBool'1, .other < .oBool'1,
   .oBool'1 < ret]

Analyzing \tlSetOtherBool:
* This: None
* Return: <ret>
* Params:
  lvars:
    { $bool -> <$bool>;
      $obj ->
      \My<\My, lump, mInt=?thunk,
            other=\Other<\Other, lump'1, oBool=<.oBool>>> }
  pc: pc
* Final environment:
  Deps: {}
  Locals:
    lvars:
      { $bool -> <$bool>;
        $obj ->
        \My<\My, lump, mInt=?thunk,
              other=\Other<\Other, lump'1, oBool=<.oBool>>> }
    pc: pc
Constraints:
  [\Other < .other, \My < .other, .other < .oBool, $bool < .oBool,
   pc < .oBool]

Flow constraints for \My#__construct:
  
  Simplified: True
  Raw:
  [\My < .mInt, $mInt < .mInt, pc < .mInt, \My < \Other'1, .oBool < .oBool'1,
   .oBool'1 < .oBool, lump'1 = lump'2, \Other < \Other'1, pc < \Other'1,
   \My < lump, $mBool < lump, pc < lump]

Flow constraints for \My#getMInt:
  
  Simplified: True
  Raw: [.mInt < .mInt'1, \My < .mInt'1, .mInt'1 < ret]

Flow constraints for \My#setMInt:
  
  Simplified: True
  Raw: [\My < .mInt, $candidate < .mInt, pc < .mInt]

Flow constraints for \tlGetMyInt:
  
  Simplified: True
  Raw: [.mInt < .mInt'1, \My < .mInt'1, .mInt'1 < ret]

Flow constraints for \tlGetOther:
  
  Simplified: True
  Raw:
  [\Other'1 < .other, \My < .other, .oBool < .oBool'1, .oBool'1 < .oBool,
   lump'2 = lump, .other < \Other]

Flow constraints for \tlGetOtherBool:
  
  Simplified: True
  Raw:
  [\Other < .other, \My < .other, .oBool < .oBool'1, .other < .oBool'1,
   .oBool'1 < ret]

Flow constraints for \tlSetMyInt:
  
  Simplified: True
  Raw: [\My < .mInt, $val < .mInt, pc < .mInt]

Flow constraints for \tlSetOtherBool:
  
  Simplified: True
  Raw:
  [\Other < .other, \My < .other, .other < .oBool, $bool < .oBool,
   pc < .oBool]

