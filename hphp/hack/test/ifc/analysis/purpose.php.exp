Decls:
  class \C: { policied_props = [ci:Secret, d:Secret] }
  class \D: { policied_props = [] }
  class \HH\vec: { policied_props = [] }
  function \C#__construct: { kind = public }
  function \C#getDeep: { kind = public }
  function \C#getShallow1: { kind = public }
  function \C#getShallow2: { kind = public }
  function \C#writeDeep: { kind = public }
  function \D#__construct: { kind = public }
  
Analyzing __construct:
* This: \D<\D, lump>
* Return: <ret>
* Params:
  lvars: { $di -> <$di> }
  pc: pc
* Final environment:
  Deps: {}
  Locals:
    lvars: { $di -> <$di> }
    pc: pc
Constraints:
  [\D < lump, $di < lump, pc < lump]

Analyzing __construct:
* This: \C<\C, lump, ci=<SECRET>, d=\D<SECRET, SECRET>>
* Return: <ret>
* Params:
  lvars: { $ci -> <$ci>; $d -> \D<\D, lump'1> }
  pc: pc
* Final environment:
  Deps: {}
  Locals:
    lvars: { $ci -> <$ci>; $d -> \D<\D, lump'1> }
    pc: pc
Constraints:
  [\C < SECRET, $ci < SECRET, pc < SECRET, \C < SECRET, lump'1 = SECRET,
   \D < SECRET, pc < SECRET]

Analyzing getShallow1:
* This: \C<\C, lump, ci=<SECRET>, d=?thunk>
* Return: <ret>
* Params:
  lvars: {}
  pc: pc
* Final environment:
  Deps: {}
  Locals:
    lvars: {}
    pc: pc
Constraints:
  [SECRET < .ci, \C < .ci, .ci < ret]

Analyzing getShallow2:
* This: \C<\C, lump, ci=?thunk, d=\D<SECRET, SECRET>>
* Return: \D<\D, lump'1>
* Params:
  lvars: {}
  pc: pc
* Final environment:
  Deps: {}
  Locals:
    lvars: {}
    pc: pc
Constraints:
  [SECRET < .d, \C < .d, SECRET = lump'1, .d < \D]

Analyzing getDeep:
* This: \C<\C, lump, ci=?thunk, d=\D<SECRET, SECRET>>
* Return: <ret>
* Params:
  lvars: {}
  pc: pc
* Final environment:
  Deps: {}
  Locals:
    lvars: {}
    pc: pc
Constraints:
  [SECRET < .d, \C < .d, SECRET < .di, .d < .di, .di < ret]

Analyzing writeDeep:
* This: \C<\C, lump, ci=?thunk, d=\D<SECRET, SECRET>>
* Return: <ret>
* Params:
  lvars: {}
  pc: pc
* Final environment:
  Deps: {}
  Locals:
    lvars: {}
    pc: pc
Constraints:
  [SECRET < .d, \C < .d, .d < SECRET, PUBLIC < SECRET, pc < SECRET]

Flow constraints for \C#__construct:
  
  Simplified: True
  Raw:
  [\C < SECRET, $ci < SECRET, pc < SECRET, \C < SECRET, lump'1 = SECRET,
   \D < SECRET, pc < SECRET]

Flow constraints for \C#getDeep:
  
  Simplified: True
  Raw: [SECRET < .d, \C < .d, SECRET < .di, .d < .di, .di < ret]

Flow constraints for \C#getShallow1:
  
  Simplified: True
  Raw: [SECRET < .ci, \C < .ci, .ci < ret]

Flow constraints for \C#getShallow2:
  
  Simplified: True
  Raw: [SECRET < .d, \C < .d, SECRET = lump'1, .d < \D]

Flow constraints for \C#writeDeep:
  
  Simplified: PUBLIC < SECRET
  Raw: [SECRET < .d, \C < .d, .d < SECRET, PUBLIC < SECRET, pc < SECRET]


Flow constraints for \D#__construct:
  
  Simplified: True
  Raw: [\D < lump, $di < lump, pc < lump]

There are privacy policy errors in \C#writeDeep:
  Data with policy PUBLIC appears in context SECRET.
  
