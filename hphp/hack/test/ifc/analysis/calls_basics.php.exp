Decls:
  class \C: { policied_props = [a:A, b:B] }
  class \Exception: { policied_props = [] }
  class \HH\vec: { policied_props = [] }
  function \C#is_a_pos: { kind = infer }
  function \C#setb: { kind = infer }
  function \dbl: { kind = infer }
  function \flow_a_to_b: { kind = public }
  function \flow_b_to_b: { kind = public }
  function \flow_bot_to_b: { kind = public }
  function \indirect_flow_a_to_b: { kind = public }
  function \indirect_flow_a_to_b_bis: { kind = public }
  
Analyzing setb:
* pc: pc
* This: \C<\C, lump'1, a=?thunk, b=<B>>
* Return: <ret>
* Exception: \Exception<\Exception, lump>
* Params:
  lvars: { $n -> <$n> }
* Final environment:
  Deps: {}
  Locals:
    lvars: { $n -> <$n> }
Constraints:
  [\C < B, $n < B, pc < B]

Analyzing is_a_pos:
* pc: pc
* This: \C<\C, lump'1, a=<A>, b=?thunk>
* Return: <ret>
* Exception: \Exception<\Exception, lump>
* Params:
  lvars: {}
* Final environment:
  Deps: {}
  Locals:
    lvars: {}
    pc: .a
Constraints:
  [A < .a, \C < .a, .a < ret, PUBLIC < ret, .a < ret, PUBLIC < ret]

Analyzing \dbl:
* pc: pc
* This: None
* Return: <ret>
* Exception: \Exception<\Exception, lump>
* Params:
  lvars: { $x -> <$x> }
* Final environment:
  Deps: {}
  Locals:
    lvars: { $x -> <$x'1> }
Constraints:
  [$x < $x'1, $x'1 < ret]

Analyzing \flow_a_to_b:
* pc: pc
* This: None
* Return: <ret>
* Exception: \Exception<\Exception, lump>
* Params:
  lvars: { $c -> \C<\C, lump'1, a=<A>, b=?thunk> }
* Final environment:
  Deps: { "\\C#setb"; "\\dbl" }
  Locals:
    lvars: { $c -> \C<\C, lump'1, a=<A>, b=?thunk>; $n -> <$n> }
Constraints:
  [A < .a, \C < .a, {\dbl<pc>(<.a>): <\dbl_ret>}, \dbl_ret < $n,
   {(this: \C<\C, lump'1, a=<A>, b=?thunk>)->\C#setb<pc>(<$n>): <\C#setb_ret>}]

Analyzing \flow_b_to_b:
* pc: pc
* This: None
* Return: <ret>
* Exception: \Exception<\Exception, lump>
* Params:
  lvars: { $c -> \C<\C, lump'1, a=?thunk, b=<B>> }
* Final environment:
  Deps: { "\\C#setb" }
  Locals:
    lvars: { $c -> \C<\C, lump'1, a=?thunk, b=<B>> }
Constraints:
  [B < .b, \C < .b,
   {(this: \C<\C, lump'1, a=?thunk, b=<B>>)->\C#setb<pc>(<.b>): <\C#setb_ret>}]

Analyzing \flow_bot_to_b:
* pc: pc
* This: None
* Return: <ret>
* Exception: \Exception<\Exception, lump>
* Params:
  lvars: { $c -> \C<\C, lump'1, a=?thunk, b=?thunk> }
* Final environment:
  Deps: { "\\C#setb"; "\\dbl" }
  Locals:
    lvars: { $c -> \C<\C, lump'1, a=?thunk, b=?thunk> }
Constraints:
  [{\dbl<pc>(<PUBLIC>): <\dbl_ret>}, {\dbl<pc>(<\dbl_ret>): <\dbl_ret'1>},
   {(this: \C<\C, lump'1, a=?thunk, b=?thunk>)->\C#setb<pc>(<\dbl_ret'1>): <\C#setb_ret>}]

Analyzing \indirect_flow_a_to_b:
* pc: pc
* This: None
* Return: <ret>
* Exception: \Exception<\Exception, lump>
* Params:
  lvars: { $c -> \C<\C, lump'1, a=<A>, b=?thunk> }
* Final environment:
  Deps: { "\\C#setb" }
  Locals:
    lvars: { $c -> \C<\C, lump'1, a=<A>, b=?thunk> }
Constraints:
  [A < .a, \C < .a, .a < pcjoin, pc < pcjoin,
   {(this: \C<\C, lump'1, a=<A>, b=?thunk>)->\C#setb<pcjoin>(<PUBLIC>): <\C#setb_ret>}]

Analyzing \indirect_flow_a_to_b_bis:
* pc: pc
* This: None
* Return: <ret>
* Exception: \Exception<\Exception, lump>
* Params:
  lvars:
    { $c1 -> \C<\C, lump'1, a=?thunk, b=?thunk>;
      $c2 -> \C<\C'1, lump'2, a=?thunk, b=<B>> }
* Final environment:
  Deps: { "\\C#is_a_pos"; "\\C#setb" }
  Locals:
    lvars:
      { $c1 -> \C<\C, lump'1, a=?thunk, b=?thunk>;
        $c2 -> \C<\C'1, lump'2, a=?thunk, b=<B>> }
Constraints:
  [{(this: \C<\C, lump'1, a=?thunk, b=?thunk>)->\C#is_a_pos<pc>(): <\C#is_a_pos_ret>},
   B < .b, \C'1 < .b, \C#is_a_pos_ret < pcjoin, pc < pcjoin,
   {(this: \C<\C'1, lump'2, a=?thunk, b=<B>>)->\C#setb<pcjoin>(<.b>): <\C#setb_ret>}]

Flow constraints for \C#is_a_pos:
  
  Simplified: True
  Raw: [A < .a, \C < .a, .a < ret, PUBLIC < ret, .a < ret, PUBLIC < ret]


Flow constraints for \C#setb:
  
  Simplified: True
  Raw: [\C < B, $n < B, pc < B]

Flow constraints for \dbl:
  
  Simplified: True
  Raw: [$x < $x'1, $x'1 < ret]

Flow constraints for \flow_a_to_b:
  
  Simplified: A < B
  Raw:
  [A < .a, \C < .a,
   exists a b c d. [b < a, a < d, .a < b, pc < c, d < \dbl_ret],
   \dbl_ret < $n,
   exists a b c d e.
     [d < B, a < B, b < B, $n < a, pc < b, B < B, B < B, A < A, A < A,
      lump'1 = c, \C < d, e < \C#setb_ret]]

Flow constraints for \flow_b_to_b:
  
  Simplified: True
  Raw:
  [B < .b, \C < .b,
   exists a b c d e.
     [d < B, a < B, b < B, .b < a, pc < b, B < B, B < B, A < A, A < A,
      lump'1 = c, \C < d, e < \C#setb_ret]]

Flow constraints for \flow_bot_to_b:
  
  Simplified: PUBLIC < B
  Raw:
  [exists a b c d. [b < a, a < d, PUBLIC < b, pc < c, d < \dbl_ret],
   exists a b c d. [b < a, a < d, \dbl_ret < b, pc < c, d < \dbl_ret'1],
   exists a b c d e.
     [d < B, a < B, b < B, \dbl_ret'1 < a, pc < b, B < B, B < B, A < A,
      A < A, lump'1 = c, \C < d, e < \C#setb_ret]]

Flow constraints for \indirect_flow_a_to_b:
  
  Simplified: [PUBLIC < B, A < B]
  Raw:
  [A < .a, \C < .a, .a < pcjoin, pc < pcjoin,
   exists a b c d e.
     [d < B, a < B, b < B, PUBLIC < a, pcjoin < b, B < B, B < B, A < A,
      A < A, lump'1 = c, \C < d, e < \C#setb_ret]]

Flow constraints for \indirect_flow_a_to_b_bis:
  
  Simplified: [PUBLIC < B, A < B]
  Raw:
  [exists a b c d e.
     [A < a, d < a, a < e, PUBLIC < e, a < e, PUBLIC < e, pc < b, B < B,
      B < B, A < A, A < A, lump'1 = c, \C < d, e < \C#is_a_pos_ret], B < .b,
   \C'1 < .b, \C#is_a_pos_ret < pcjoin, pc < pcjoin,
   exists a b c d e.
     [d < B, a < B, b < B, .b < a, pcjoin < b, B < B, B < B, A < A, A < A,
      lump'2 = c, \C'1 < d, e < \C#setb_ret]]

Lattice:
 {}

There are privacy policy errors in \flow_a_to_b:
  Data with policy A appears in context B.
  
There are privacy policy errors in \indirect_flow_a_to_b:
  Data with policy A appears in context B.
  
There are privacy policy errors in \indirect_flow_a_to_b_bis:
  Data with policy A appears in context B.
  
