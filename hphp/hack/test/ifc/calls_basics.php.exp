Decls:
  class \C: { policied_props = [a:A, b:B] }
  function \C#is_a_pos: { kind = infer }
  function \C#setb: { kind = infer }
  function \dbl: { kind = infer }
  function \flow_a_to_b: { kind = public }
  function \flow_b_to_b: { kind = public }
  function \flow_bot_to_b: { kind = public }
  function \indirect_flow_a_to_b: { kind = public }
  function \indirect_flow_a_to_b_bis: { kind = public }
  
Analyzing setb:
* pc: pc
* This: \C<\C, lump, a=?thunk, b=<B>>
* Return: <ret>
* Params: { $n -> <$n> }
* Final environment:
  Deps: {}
  Locals: { $n -> <$n> }
  Constraints:
    [\C < B, $n < B, pc < B]

Analyzing is_a_pos:
* pc: pc
* This: \C<\C, lump, a=<A>, b=?thunk>
* Return: <ret>
* Params: {}
* Final environment:
  Deps: {}
  Locals: {}
  Constraints:
    [A < .a, \C < .a, .a < ret, Bot < ret, .a < ret, Bot < ret]

Analyzing \dbl:
* pc: pc
* This: None
* Return: <ret>
* Params: { $x -> <$x> }
* Final environment:
  Deps: {}
  Locals: { $x -> <$x'1> }
  Constraints:
    [$x < $x'1, $x'1 < ret]

Analyzing \flow_a_to_b:
* pc: pc
* This: None
* Return: <ret>
* Params: { $c -> \C<\C, lump, a=<A>, b=?thunk> }
* Final environment:
  Deps: { "\\C#setb"; "\\dbl" }
  Locals: { $c -> \C<\C, lump, a=<A>, b=?thunk>; $n -> <$n> }
  Constraints:
    [A < .a, \C < .a, {\dbl<pc>(<.a>): <\dbl_ret>}, \dbl_ret < $n,
     {(this: \C<\C, lump, a=<A>, b=?thunk>)->\C#setb<pc>(<$n>): <\C#setb_ret>}]

Analyzing \flow_b_to_b:
* pc: pc
* This: None
* Return: <ret>
* Params: { $c -> \C<\C, lump, a=?thunk, b=<B>> }
* Final environment:
  Deps: { "\\C#setb" }
  Locals: { $c -> \C<\C, lump, a=?thunk, b=<B>> }
  Constraints:
    [B < .b, \C < .b,
     {(this: \C<\C, lump, a=?thunk, b=<B>>)->\C#setb<pc>(<.b>): <\C#setb_ret>}]

Analyzing \flow_bot_to_b:
* pc: pc
* This: None
* Return: <ret>
* Params: { $c -> \C<\C, lump, a=?thunk, b=?thunk> }
* Final environment:
  Deps: { "\\C#setb"; "\\dbl" }
  Locals: { $c -> \C<\C, lump, a=?thunk, b=?thunk> }
  Constraints:
    [{\dbl<pc>(<Bot>): <\dbl_ret>}, {\dbl<pc>(<\dbl_ret>): <\dbl_ret'1>},
     {(this: \C<\C, lump, a=?thunk, b=?thunk>)->\C#setb<pc>(<\dbl_ret'1>): <\C#setb_ret>}]

Analyzing \indirect_flow_a_to_b:
* pc: pc
* This: None
* Return: <ret>
* Params: { $c -> \C<\C, lump, a=<A>, b=?thunk> }
* Final environment:
  Deps: { "\\C#setb" }
  Locals: { $c -> \C<\C, lump, a=<A>, b=?thunk> }
  Constraints:
    [A < .a, \C < .a, .a < pcjoin, pc < pcjoin,
     {(this: \C<\C, lump, a=<A>, b=?thunk>)->\C#setb<pcjoin>(<Bot>): <\C#setb_ret>}]

Analyzing \indirect_flow_a_to_b_bis:
* pc: pc
* This: None
* Return: <ret>
* Params:
    { $c1 -> \C<\C, lump, a=?thunk, b=?thunk>;
      $c2 -> \C<\C'1, lump'1, a=?thunk, b=<B>> }
* Final environment:
  Deps: { "\\C#is_a_pos"; "\\C#setb" }
  Locals:
    { $c1 -> \C<\C, lump, a=?thunk, b=?thunk>;
      $c2 -> \C<\C'1, lump'1, a=?thunk, b=<B>> }
  Constraints:
    [{(this: \C<\C, lump, a=?thunk, b=?thunk>)->\C#is_a_pos<pc>(): <\C#is_a_pos_ret>},
     B < .b, \C'1 < .b, \C#is_a_pos_ret < pcjoin, pc < pcjoin,
     {(this: \C<\C'1, lump'1, a=?thunk, b=<B>>)->\C#setb<pcjoin>(<.b>): <\C#setb_ret>}]

Global solving:
  Flows for \C#is_a_pos:
    [A < .a, \C < .a, .a < ret, Bot < ret, .a < ret, Bot < ret]
    simplified: True
  Flows for \C#setb:
    [\C < B, $n < B, pc < B]
    simplified: True
  Flows for \dbl:
    [$x < $x'1, $x'1 < ret]
    simplified: True
  Flows for \flow_a_to_b:
    [A < .a, \C < .a,
     exists a b c d. [b < a, a < d, .a < b, pc < c, d < \dbl_ret],
     \dbl_ret < $n,
     exists a b c d e.
       [d < B, a < B, b < B, $n < a, pc < b, B < B, B < B, A < A, A < A,
        lump = c, \C < d, e < \C#setb_ret]]
    simplified: A < B
  Flows for \flow_b_to_b:
    [B < .b, \C < .b,
     exists a b c d e.
       [d < B, a < B, b < B, .b < a, pc < b, B < B, B < B, A < A, A < A,
        lump = c, \C < d, e < \C#setb_ret]]
    simplified: True
  Flows for \flow_bot_to_b:
    [exists a b c d. [b < a, a < d, Bot < b, pc < c, d < \dbl_ret],
     exists a b c d. [b < a, a < d, \dbl_ret < b, pc < c, d < \dbl_ret'1],
     exists a b c d e.
       [d < B, a < B, b < B, \dbl_ret'1 < a, pc < b, B < B, B < B, A < A,
        A < A, lump = c, \C < d, e < \C#setb_ret]]
    simplified: Bot < B
  Flows for \indirect_flow_a_to_b:
    [A < .a, \C < .a, .a < pcjoin, pc < pcjoin,
     exists a b c d e.
       [d < B, a < B, b < B, Bot < a, pcjoin < b, B < B, B < B, A < A, A < A,
        lump = c, \C < d, e < \C#setb_ret]]
    simplified: [Bot < B, A < B]
  Flows for \indirect_flow_a_to_b_bis:
    [exists a b c d e.
       [A < a, d < a, a < e, Bot < e, a < e, Bot < e, pc < b, B < B, B < B,
        A < A, A < A, lump = c, \C < d, e < \C#is_a_pos_ret], B < .b,
     \C'1 < .b, \C#is_a_pos_ret < pcjoin, pc < pcjoin,
     exists a b c d e.
       [d < B, a < B, b < B, .b < a, pcjoin < b, B < B, B < B, A < A, A < A,
        lump'1 = c, \C'1 < d, e < \C#setb_ret]]
    simplified: [Bot < B, A < B]
  
