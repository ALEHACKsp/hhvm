Analyzing __construct:
* pc: pc
* This: \My<\My, lump'1, mInt=MINT, other=OTHER>
* Return: <ret>
* Exception: \Exception<\Exception, lump>
* Params:
  lvars:
    { $mBool -> <$mBool>;
      $mInt -> <$mInt>;
      $other -> \Other<\Other, lump'2, oBool=OBOOL> }
* Final environment:
  Deps: {}
  Locals:
    lvars:
      { $mBool -> <$mBool>;
        $mInt -> <$mInt>;
        $other -> \Other<\Other, lump'2, oBool=OBOOL> }
Constraints:
  [\My < MINT, $mInt < MINT, pc < MINT, \My < OTHER, lump'2 = OTHER,
   \Other < OTHER, pc < OTHER, \My < lump'1, $mBool < lump'1, pc < lump'1]

Analyzing getMInt:
* pc: pc
* This: \My<\My, lump'1, mInt=MINT, other=OTHER>
* Return: <ret>
* Exception: \Exception<\Exception, lump>
* Params:
  lvars: {}
* Final environment:
  Deps: {}
  Locals:
    lvars: {}
Constraints:
  [MINT < .mInt, \My < .mInt, .mInt < ret]

Analyzing setMInt:
* pc: pc
* This: \My<\My, lump'1, mInt=MINT, other=OTHER>
* Return: <ret>
* Exception: \Exception<\Exception, lump>
* Params:
  lvars: { $candidate -> <$candidate> }
* Final environment:
  Deps: {}
  Locals:
    lvars: { $candidate -> <$candidate> }
Constraints:
  [\My < MINT, $candidate < MINT, pc < MINT]

Analyzing \tlGetMyInt:
* pc: pc
* This: None
* Return: <ret>
* Exception: \Exception<\Exception, lump>
* Params:
  lvars: { $obj -> \My<\My, lump'1, mInt=MINT, other=OTHER> }
* Final environment:
  Deps: {}
  Locals:
    lvars: { $obj -> \My<\My, lump'1, mInt=MINT, other=OTHER> }
Constraints:
  [MINT < .mInt, \My < .mInt, .mInt < ret]

Analyzing \tlSetMyInt:
* pc: pc
* This: None
* Return: <ret>
* Exception: \Exception<\Exception, lump>
* Params:
  lvars: { $obj -> \My<\My, lump'1, mInt=MINT, other=OTHER>; $val -> <$val> }
* Final environment:
  Deps: {}
  Locals:
    lvars:
      { $obj -> \My<\My, lump'1, mInt=MINT, other=OTHER>; $val -> <$val> }
Constraints:
  [\My < MINT, $val < MINT, pc < MINT]

Analyzing \tlGetOther:
* pc: pc
* This: None
* Return: \Other<\Other, lump'1, oBool=OBOOL>
* Exception: \Exception<\Exception, lump>
* Params:
  lvars: { $obj -> \My<\My, lump'2, mInt=MINT, other=OTHER> }
* Final environment:
  Deps: {}
  Locals:
    lvars: { $obj -> \My<\My, lump'2, mInt=MINT, other=OTHER> }
Constraints:
  [OTHER < .other, \My < .other, OTHER = lump'1, .other < \Other]

Analyzing \tlGetOtherBool:
* pc: pc
* This: None
* Return: <ret>
* Exception: \Exception<\Exception, lump>
* Params:
  lvars: { $obj -> \My<\My, lump'1, mInt=MINT, other=OTHER> }
* Final environment:
  Deps: {}
  Locals:
    lvars: { $obj -> \My<\My, lump'1, mInt=MINT, other=OTHER> }
Constraints:
  [OTHER < .other, \My < .other, OBOOL < .oBool, .other < .oBool,
   .oBool < ret]

Analyzing \tlSetOtherBool:
* pc: pc
* This: None
* Return: <ret>
* Exception: \Exception<\Exception, lump>
* Params:
  lvars:
    { $bool -> <$bool>; $obj -> \My<\My, lump'1, mInt=MINT, other=OTHER> }
* Final environment:
  Deps: {}
  Locals:
    lvars:
      { $bool -> <$bool>; $obj -> \My<\My, lump'1, mInt=MINT, other=OTHER> }
Constraints:
  [OTHER < .other, \My < .other, .other < OBOOL, $bool < OBOOL, pc < OBOOL]

