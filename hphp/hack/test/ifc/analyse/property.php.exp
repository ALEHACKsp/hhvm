Analyzing __construct:
* pc: pc
* This:
    \My<\My, lump'1, mInt=<.mInt>,
          other=\Other<\Other'1, lump'3, oBool=<.oBool>>>
* Return: <ret>
* Exception: \Exception<\Exception, lump>
* Params:
  lvars:
    { $mBool -> <$mBool>;
      $mInt -> <$mInt>;
      $other -> \Other<\Other, lump'2, oBool=<.oBool'1>> }
* Final environment:
  Deps: {}
  Locals:
    lvars:
      { $mBool -> <$mBool>;
        $mInt -> <$mInt>;
        $other -> \Other<\Other, lump'2, oBool=<.oBool'1>> }
Constraints:
  [\My < .mInt, $mInt < .mInt, pc < .mInt, \My < \Other'1, .oBool < .oBool'1,
   .oBool'1 < .oBool, lump'2 = lump'3, \Other < \Other'1, pc < \Other'1,
   \My < lump'1, $mBool < lump'1, pc < lump'1]

Analyzing getMInt:
* pc: pc
* This: \My<\My, lump'1, mInt=<.mInt>, other=?thunk>
* Return: <ret>
* Exception: \Exception<\Exception, lump>
* Params:
  lvars: {}
* Final environment:
  Deps: {}
  Locals:
    lvars: {}
Constraints:
  [.mInt < .mInt'1, \My < .mInt'1, .mInt'1 < ret]

Analyzing setMInt:
* pc: pc
* This: \My<\My, lump'1, mInt=<.mInt>, other=?thunk>
* Return: <ret>
* Exception: \Exception<\Exception, lump>
* Params:
  lvars: { $candidate -> <$candidate> }
* Final environment:
  Deps: {}
  Locals:
    lvars: { $candidate -> <$candidate> }
Constraints:
  [\My < .mInt, $candidate < .mInt, pc < .mInt]

Analyzing \tlGetMyInt:
* pc: pc
* This: None
* Return: <ret>
* Exception: \Exception<\Exception, lump>
* Params:
  lvars: { $obj -> \My<\My, lump'1, mInt=<.mInt>, other=?thunk> }
* Final environment:
  Deps: {}
  Locals:
    lvars: { $obj -> \My<\My, lump'1, mInt=<.mInt>, other=?thunk> }
Constraints:
  [.mInt < .mInt'1, \My < .mInt'1, .mInt'1 < ret]

Analyzing \tlSetMyInt:
* pc: pc
* This: None
* Return: <ret>
* Exception: \Exception<\Exception, lump>
* Params:
  lvars:
    { $obj -> \My<\My, lump'1, mInt=<.mInt>, other=?thunk>; $val -> <$val> }
* Final environment:
  Deps: {}
  Locals:
    lvars:
      { $obj -> \My<\My, lump'1, mInt=<.mInt>, other=?thunk>;
        $val -> <$val> }
Constraints:
  [\My < .mInt, $val < .mInt, pc < .mInt]

Analyzing \tlGetOther:
* pc: pc
* This: None
* Return: \Other<\Other, lump'1, oBool=<.oBool>>
* Exception: \Exception<\Exception, lump>
* Params:
  lvars:
    { $obj ->
      \My<\My, lump'2, mInt=?thunk,
            other=\Other<\Other'1, lump'3, oBool=<.oBool'1>>> }
* Final environment:
  Deps: {}
  Locals:
    lvars:
      { $obj ->
        \My<\My, lump'2, mInt=?thunk,
              other=\Other<\Other'1, lump'3, oBool=<.oBool'1>>> }
Constraints:
  [\Other'1 < .other, \My < .other, .oBool < .oBool'1, .oBool'1 < .oBool,
   lump'3 = lump'1, .other < \Other]

Analyzing \tlGetOtherBool:
* pc: pc
* This: None
* Return: <ret>
* Exception: \Exception<\Exception, lump>
* Params:
  lvars:
    { $obj ->
      \My<\My, lump'1, mInt=?thunk,
            other=\Other<\Other, lump'2, oBool=<.oBool>>> }
* Final environment:
  Deps: {}
  Locals:
    lvars:
      { $obj ->
        \My<\My, lump'1, mInt=?thunk,
              other=\Other<\Other, lump'2, oBool=<.oBool>>> }
Constraints:
  [\Other < .other, \My < .other, .oBool < .oBool'1, .other < .oBool'1,
   .oBool'1 < ret]

Analyzing \tlSetOtherBool:
* pc: pc
* This: None
* Return: <ret>
* Exception: \Exception<\Exception, lump>
* Params:
  lvars:
    { $bool -> <$bool>;
      $obj ->
      \My<\My, lump'1, mInt=?thunk,
            other=\Other<\Other, lump'2, oBool=<.oBool>>> }
* Final environment:
  Deps: {}
  Locals:
    lvars:
      { $bool -> <$bool>;
        $obj ->
        \My<\My, lump'1, mInt=?thunk,
              other=\Other<\Other, lump'2, oBool=<.oBool>>> }
Constraints:
  [\Other < .other, \My < .other, .other < .oBool, $bool < .oBool,
   pc < .oBool]

