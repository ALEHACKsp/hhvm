# members2.good.php starts here

.filepath "members2.good.php";

.adata A_0 = """Y:2:{s:4:\"kind\";i:21;s:13:\"generic_types\";y:1:{Y:1:{s:4:\"kind\";i:4;}}}""";
.adata A_1 = """k:1:{s:1:\"S\";}""";
.adata A_2 = """k:1:{s:2:\"S2\";}""";
.adata A_3 = """k:2:{s:1:\"S\";s:2:\"S2\";}""";
.adata A_4 = """k:1:{s:1:\"X\";}""";

.main (1,1) {
  .srcloc 3:7,3:7;
  DefCls 0
  .srcloc 12:7,12:7;
  DefCls 1
  .srcloc 26:7,26:7;
  DefCls 2
  .srcloc 40:7,40:10;
  DefCls 3
  .srcloc 41:7,41:9;
  DefCls 4
  Int 1
  RetC
}

.function {} ["__EntryPoint"("""y:0:{}""")] (51,83) <"HH\\void" N > main() {
  .numiters 1;
  .declvars $k;
  .srcloc 52:8,52:25;
  String "Members in Foo\n"
  .srcloc 52:3,52:26;
  Print
  .srcloc 52:3,52:26;
  PopC
  .srcloc 53:12,53:28;
  NullUninit
  NullUninit
  NullUninit
  .srcloc 53:12,53:28;
  FCallClsMethodD <> 0 1 "" - "" "" "Foo" "pu$E$Members"
  .srcloc 53:12,53:28;
  IterInit 0 NK V:$k L0
  .try {
  L1:
    .srcloc 54:10,54:11;
    CGetL $k
    .srcloc 54:5,54:12;
    Print
    .srcloc 54:5,54:12;
    PopC
    .srcloc 55:10,55:13;
    String "\n"
    .srcloc 55:5,55:14;
    Print
    .srcloc 55:5,55:14;
    PopC
    .srcloc 53:3,56:69;
    IterNext 0 NK V:$k L1
    Jmp L0
  } .catch {
    IterFree 0
    Throw
  }
L0:
  .srcloc 58:8,58:23;
  String "Members in C\n"
  .srcloc 58:3,58:24;
  Print
  .srcloc 58:3,58:24;
  PopC
  .srcloc 59:12,59:26;
  NullUninit
  NullUninit
  NullUninit
  .srcloc 59:12,59:26;
  FCallClsMethodD <> 0 1 "" - "" "" "C" "pu$E$Members"
  .srcloc 59:12,59:26;
  IterInit 0 NK V:$k L2
  .try {
  L3:
    .srcloc 60:10,60:11;
    CGetL $k
    .srcloc 60:5,60:12;
    Print
    .srcloc 60:5,60:12;
    PopC
    .srcloc 61:10,61:13;
    String "\n"
    .srcloc 61:5,61:14;
    Print
    .srcloc 61:5,61:14;
    PopC
    .srcloc 59:3,62:67;
    IterNext 0 NK V:$k L3
    Jmp L2
  } .catch {
    IterFree 0
    Throw
  }
L2:
  .srcloc 64:8,64:23;
  String "Members in D\n"
  .srcloc 64:3,64:24;
  Print
  .srcloc 64:3,64:24;
  PopC
  .srcloc 65:8,65:17;
  String "From E\n"
  .srcloc 65:3,65:18;
  Print
  .srcloc 65:3,65:18;
  PopC
  .srcloc 66:12,66:26;
  NullUninit
  NullUninit
  NullUninit
  .srcloc 66:12,66:26;
  FCallClsMethodD <> 0 1 "" - "" "" "D" "pu$E$Members"
  .srcloc 66:12,66:26;
  IterInit 0 NK V:$k L4
  .try {
  L5:
    .srcloc 67:10,67:11;
    CGetL $k
    .srcloc 67:5,67:12;
    Print
    .srcloc 67:5,67:12;
    PopC
    .srcloc 68:10,68:13;
    String "\n"
    .srcloc 68:5,68:14;
    Print
    .srcloc 68:5,68:14;
    PopC
    .srcloc 66:3,69:67;
    IterNext 0 NK V:$k L5
    Jmp L4
  } .catch {
    IterFree 0
    Throw
  }
L4:
  .srcloc 70:8,70:17;
  String "From F\n"
  .srcloc 70:3,70:18;
  Print
  .srcloc 70:3,70:18;
  PopC
  .srcloc 71:12,71:26;
  NullUninit
  NullUninit
  NullUninit
  .srcloc 71:12,71:26;
  FCallClsMethodD <> 0 1 "" - "" "" "D" "pu$F$Members"
  .srcloc 71:12,71:26;
  IterInit 0 NK V:$k L6
  .try {
  L7:
    .srcloc 72:10,72:11;
    CGetL $k
    .srcloc 72:5,72:12;
    Print
    .srcloc 72:5,72:12;
    PopC
    .srcloc 73:10,73:13;
    String "\n"
    .srcloc 73:5,73:14;
    Print
    .srcloc 73:5,73:14;
    PopC
    .srcloc 71:3,74:67;
    IterNext 0 NK V:$k L7
    Jmp L6
  } .catch {
    IterFree 0
    Throw
  }
L6:
  .srcloc 76:8,76:23;
  String "Members in E\n"
  .srcloc 76:3,76:24;
  Print
  .srcloc 76:3,76:24;
  PopC
  .srcloc 77:12,77:26;
  NullUninit
  NullUninit
  NullUninit
  .srcloc 77:12,77:26;
  FCallClsMethodD <> 0 1 "" - "" "" "E" "pu$E$Members"
  .srcloc 77:12,77:26;
  IterInit 0 NK V:$k L8
  .try {
  L9:
    .srcloc 78:10,78:11;
    CGetL $k
    .srcloc 78:5,78:12;
    Print
    .srcloc 78:5,78:12;
    PopC
    .srcloc 79:10,79:12;
    String " "
    .srcloc 79:5,79:13;
    Print
    .srcloc 79:5,79:13;
    PopC
    .srcloc 80:10,80:20;
    NullUninit
    NullUninit
    NullUninit
    .srcloc 80:18,80:19;
    CGetL $k
    .srcloc 80:10,80:20;
    FCallClsMethodD <> 1 1 "0" - "" "" "E" "pu$E$x"
    .srcloc 80:5,80:21;
    Print
    .srcloc 80:5,80:21;
    PopC
    .srcloc 81:10,81:13;
    String "\n"
    .srcloc 81:5,81:14;
    Print
    .srcloc 81:5,81:14;
    PopC
    .srcloc 77:3,82:103;
    IterNext 0 NK V:$k L9
    Jmp L8
  } .catch {
    IterFree 0
    Throw
  }
L8:
  .srcloc 83:2,83:2;
  Null
  RetC
}

.class {} C (3,10) {
  .method {}{} [private static "__Memoize"("""y:0:{}""")] (4,4) <"HH\\keyset<HH\\string>" "HH\\keyset" extended_hint> pu$E$Members$memoize_impl() {
    .srcloc 4:8,4:8;
    Keyset @A_1
    .srcloc 4:8,4:8;
    Array @A_0
    VerifyRetTypeTS
    RetC
  }
  .method {}{} [private static "__Memoize"("""y:0:{}""")] (4,4) <"HH\\mixed" N > pu$E$val$memoize_impl(<"HH\\string" "HH\\string" > $atom) {
    .srcloc 4:8,4:8;
    VerifyParamType $atom
    .srcloc 4:8,4:8;
    String "S"
    .srcloc 4:8,4:8;
    CGetL2 $atom
    Eq
    JmpNZ L0
    Jmp L1
  L0:
    .srcloc 7:13,7:19;
    String "Hello"
    .srcloc 4:8,4:8;
    RetC
  L1:
    .srcloc 4:8,4:8;
    NewObjD "Exception"
    Dup
    NullUninit
    NullUninit
    .srcloc 4:8,4:8;
    String "\\C:@E::val unknown atom access: "
    .srcloc 4:8,4:8;
    CGetL $atom
    Concat
    .srcloc 4:8,4:8;
    FCallCtor <LockWhileUnwinding> 1 1 "0" - "" ""
    PopC
    LockObj
    .srcloc 4:8,4:8;
    Throw
    .srcloc 4:9,4:9;
    Null
    RetC
  }
  .method {}{} [public static "__Memoize"("""y:0:{}""")] (4,4) <"HH\\keyset<HH\\string>" "HH\\keyset" extended_hint> pu$E$Members() {
    .ismemoizewrapper;
    .srcloc 4:8,4:8;
    MemoGet L0 L:0+0
    RetC
  L0:
    NullUninit
    NullUninit
    NullUninit
    FCallClsMethodD <> 0 1 "" - "" "" "C" "pu$E$Members$memoize_impl"
    MemoSet L:0+0
    RetC
  }
  .method {}{} [public static "__Memoize"("""y:0:{}""")] (4,4) <"HH\\mixed" N > pu$E$val(<"HH\\string" "HH\\string" > $atom) {
    .ismemoizewrapper;
    .srcloc 4:8,4:8;
    VerifyParamType $atom
    GetMemoKeyL $atom
    SetL _1
    PopC
    MemoGet L0 L:1+1
    RetC
  L0:
    NullUninit
    NullUninit
    NullUninit
    CGetL $atom
    FCallClsMethodD <> 1 1 "" - "" "" "C" "pu$E$val$memoize_impl"
    MemoSet L:1+1
    RetC
  }
}

.class {} D (12,24) extends C {
  .method {}{} [private static "__Memoize"("""y:0:{}""") "__Override"("""y:0:{}""")] (13,13) <"HH\\keyset<HH\\string>" "HH\\keyset" extended_hint> pu$E$Members$memoize_impl() {
    .numiters 1;
    .declvars $result $class $method $parent_members $p $_;
    .srcloc 13:8,13:8;
    Keyset @A_2
    .srcloc 13:8,13:8;
    SetL $result
    .srcloc 13:8,13:8;
    PopC
    .try {
      .srcloc 13:8,13:8;
      NewObjD "ReflectionClass"
      Dup
      NullUninit
      NullUninit
      .srcloc 13:8,13:8;
      String "C"
      .srcloc 13:8,13:8;
      FCallCtor <LockWhileUnwinding> 1 1 "0" - "" ""
      PopC
      LockObj
      .srcloc 13:8,13:8;
      SetL $class
      .srcloc 13:8,13:8;
      PopC
      .srcloc 13:8,13:8;
      CGetL $class
      NullUninit
      NullUninit
      .srcloc 13:8,13:8;
      String "pu$E$Members"
      .srcloc 13:8,13:8;
      FCallObjMethodD <> 1 1 "0" - "" "" NullThrows "getMethod"
      .srcloc 13:8,13:8;
      SetL $method
      .srcloc 13:8,13:8;
      PopC
      .srcloc 13:8,13:8;
      CGetL $method
      NullUninit
      NullUninit
      .srcloc 13:8,13:8;
      Null
      .srcloc 13:8,13:8;
      FCallObjMethodD <> 1 1 "0" - "" "" NullThrows "invoke"
      .srcloc 13:8,13:8;
      SetL $parent_members
      .srcloc 13:8,13:8;
      PopC
      .srcloc 13:8,13:8;
      CGetL $parent_members
      .srcloc 13:8,13:8;
      IterInit 0 NK V:$p L0
      .try {
      L1:
        .srcloc 13:8,13:8;
        CGetL $p
        .srcloc 13:8,13:8;
        BaseL $result Define
        .srcloc 13:8,13:8;
        SetM 0 W
        .srcloc 13:8,13:8;
        PopC
        .srcloc 13:8,13:8;
        IterNext 0 NK V:$p L1
        Jmp L0
      } .catch {
        IterFree 0
        Throw
      }
    L0:
      .srcloc 13:8,13:8;
      Jmp L2
    } .catch {
      Dup
      InstanceOfD "ReflectionException"
      JmpZ L3
      SetL $_
      PopC
      .srcloc 13:8,13:8;
      Jmp L2
    L3:
      Throw
    }
  L2:
    .srcloc 13:8,13:8;
    CGetL $result
    .srcloc 13:8,13:8;
    Array @A_0
    VerifyRetTypeTS
    RetC
  }
  .method {}{} [private static "__Memoize"("""y:0:{}""")] (13,13) <"HH\\mixed" N > pu$E$val$memoize_impl(<"HH\\string" "HH\\string" > $atom) {
    .srcloc 13:8,13:8;
    VerifyParamType $atom
    .srcloc 13:8,13:8;
    String "S2"
    .srcloc 13:8,13:8;
    CGetL2 $atom
    Eq
    JmpNZ L0
    Jmp L1
  L0:
    .srcloc 15:13,15:19;
    String "youpi"
    .srcloc 13:8,13:8;
    RetC
  L1:
    .srcloc 13:8,13:8;
    NullUninit
    NullUninit
    NullUninit
    .srcloc 13:8,13:8;
    CGetL $atom
    .srcloc 13:8,13:8;
    FCallClsMethodSD <> 1 1 "0" - "" "" Parent "pu$E$val"
    .srcloc 13:8,13:8;
    RetC
    .srcloc 13:9,13:9;
    Null
    RetC
  }
  .method {}{} [private static "__Memoize"("""y:0:{}""") "__Override"("""y:0:{}""")] (18,18) <"HH\\keyset<HH\\string>" "HH\\keyset" extended_hint> pu$F$Members$memoize_impl() {
    .numiters 1;
    .declvars $result $class $method $parent_members $p $_;
    .srcloc 18:8,18:8;
    Keyset @A_1
    .srcloc 18:8,18:8;
    SetL $result
    .srcloc 18:8,18:8;
    PopC
    .try {
      .srcloc 18:8,18:8;
      NewObjD "ReflectionClass"
      Dup
      NullUninit
      NullUninit
      .srcloc 18:8,18:8;
      String "C"
      .srcloc 18:8,18:8;
      FCallCtor <LockWhileUnwinding> 1 1 "0" - "" ""
      PopC
      LockObj
      .srcloc 18:8,18:8;
      SetL $class
      .srcloc 18:8,18:8;
      PopC
      .srcloc 18:8,18:8;
      CGetL $class
      NullUninit
      NullUninit
      .srcloc 18:8,18:8;
      String "pu$F$Members"
      .srcloc 18:8,18:8;
      FCallObjMethodD <> 1 1 "0" - "" "" NullThrows "getMethod"
      .srcloc 18:8,18:8;
      SetL $method
      .srcloc 18:8,18:8;
      PopC
      .srcloc 18:8,18:8;
      CGetL $method
      NullUninit
      NullUninit
      .srcloc 18:8,18:8;
      Null
      .srcloc 18:8,18:8;
      FCallObjMethodD <> 1 1 "0" - "" "" NullThrows "invoke"
      .srcloc 18:8,18:8;
      SetL $parent_members
      .srcloc 18:8,18:8;
      PopC
      .srcloc 18:8,18:8;
      CGetL $parent_members
      .srcloc 18:8,18:8;
      IterInit 0 NK V:$p L0
      .try {
      L1:
        .srcloc 18:8,18:8;
        CGetL $p
        .srcloc 18:8,18:8;
        BaseL $result Define
        .srcloc 18:8,18:8;
        SetM 0 W
        .srcloc 18:8,18:8;
        PopC
        .srcloc 18:8,18:8;
        IterNext 0 NK V:$p L1
        Jmp L0
      } .catch {
        IterFree 0
        Throw
      }
    L0:
      .srcloc 18:8,18:8;
      Jmp L2
    } .catch {
      Dup
      InstanceOfD "ReflectionException"
      JmpZ L3
      SetL $_
      PopC
      .srcloc 18:8,18:8;
      Jmp L2
    L3:
      Throw
    }
  L2:
    .srcloc 18:8,18:8;
    CGetL $result
    .srcloc 18:8,18:8;
    Array @A_0
    VerifyRetTypeTS
    RetC
  }
  .method {}{} [private static "__Memoize"("""y:0:{}""")] (18,18) <"HH\\mixed" N > pu$F$fal$memoize_impl(<"HH\\string" "HH\\string" > $atom) {
    .srcloc 18:8,18:8;
    VerifyParamType $atom
    .srcloc 18:8,18:8;
    String "S"
    .srcloc 18:8,18:8;
    CGetL2 $atom
    Eq
    JmpNZ L0
    Jmp L1
  L0:
    .srcloc 21:13,21:17;
    String "blu"
    .srcloc 18:8,18:8;
    RetC
  L1:
    .srcloc 18:8,18:8;
    NullUninit
    NullUninit
    NullUninit
    .srcloc 18:8,18:8;
    CGetL $atom
    .srcloc 18:8,18:8;
    FCallClsMethodSD <> 1 1 "0" - "" "" Parent "pu$F$fal"
    .srcloc 18:8,18:8;
    RetC
    .srcloc 18:9,18:9;
    Null
    RetC
  }
  .method {}{} [public static "__Memoize"("""y:0:{}""") "__Override"("""y:0:{}""")] (13,13) <"HH\\keyset<HH\\string>" "HH\\keyset" extended_hint> pu$E$Members() {
    .ismemoizewrapper;
    .srcloc 13:8,13:8;
    MemoGet L0 L:0+0
    RetC
  L0:
    NullUninit
    NullUninit
    NullUninit
    FCallClsMethodD <> 0 1 "" - "" "" "D" "pu$E$Members$memoize_impl"
    MemoSet L:0+0
    RetC
  }
  .method {}{} [public static "__Memoize"("""y:0:{}""")] (13,13) <"HH\\mixed" N > pu$E$val(<"HH\\string" "HH\\string" > $atom) {
    .ismemoizewrapper;
    .srcloc 13:8,13:8;
    VerifyParamType $atom
    GetMemoKeyL $atom
    SetL _1
    PopC
    MemoGet L0 L:1+1
    RetC
  L0:
    NullUninit
    NullUninit
    NullUninit
    CGetL $atom
    FCallClsMethodD <> 1 1 "" - "" "" "D" "pu$E$val$memoize_impl"
    MemoSet L:1+1
    RetC
  }
  .method {}{} [public static "__Memoize"("""y:0:{}""") "__Override"("""y:0:{}""")] (18,18) <"HH\\keyset<HH\\string>" "HH\\keyset" extended_hint> pu$F$Members() {
    .ismemoizewrapper;
    .srcloc 18:8,18:8;
    MemoGet L0 L:0+0
    RetC
  L0:
    NullUninit
    NullUninit
    NullUninit
    FCallClsMethodD <> 0 1 "" - "" "" "D" "pu$F$Members$memoize_impl"
    MemoSet L:0+0
    RetC
  }
  .method {}{} [public static "__Memoize"("""y:0:{}""")] (18,18) <"HH\\mixed" N > pu$F$fal(<"HH\\string" "HH\\string" > $atom) {
    .ismemoizewrapper;
    .srcloc 18:8,18:8;
    VerifyParamType $atom
    GetMemoKeyL $atom
    SetL _1
    PopC
    MemoGet L0 L:1+1
    RetC
  L0:
    NullUninit
    NullUninit
    NullUninit
    CGetL $atom
    FCallClsMethodD <> 1 1 "" - "" "" "D" "pu$F$fal$memoize_impl"
    MemoSet L:1+1
    RetC
  }
}

.class {} E (26,37) extends C {
  .method {}{} [private static "__Memoize"("""y:0:{}""") "__Override"("""y:0:{}""")] (27,27) <"HH\\keyset<HH\\string>" "HH\\keyset" extended_hint> pu$E$Members$memoize_impl() {
    .numiters 1;
    .declvars $result $class $method $parent_members $p $_;
    .srcloc 27:8,27:8;
    Keyset @A_3
    .srcloc 27:8,27:8;
    SetL $result
    .srcloc 27:8,27:8;
    PopC
    .try {
      .srcloc 27:8,27:8;
      NewObjD "ReflectionClass"
      Dup
      NullUninit
      NullUninit
      .srcloc 27:8,27:8;
      String "C"
      .srcloc 27:8,27:8;
      FCallCtor <LockWhileUnwinding> 1 1 "0" - "" ""
      PopC
      LockObj
      .srcloc 27:8,27:8;
      SetL $class
      .srcloc 27:8,27:8;
      PopC
      .srcloc 27:8,27:8;
      CGetL $class
      NullUninit
      NullUninit
      .srcloc 27:8,27:8;
      String "pu$E$Members"
      .srcloc 27:8,27:8;
      FCallObjMethodD <> 1 1 "0" - "" "" NullThrows "getMethod"
      .srcloc 27:8,27:8;
      SetL $method
      .srcloc 27:8,27:8;
      PopC
      .srcloc 27:8,27:8;
      CGetL $method
      NullUninit
      NullUninit
      .srcloc 27:8,27:8;
      Null
      .srcloc 27:8,27:8;
      FCallObjMethodD <> 1 1 "0" - "" "" NullThrows "invoke"
      .srcloc 27:8,27:8;
      SetL $parent_members
      .srcloc 27:8,27:8;
      PopC
      .srcloc 27:8,27:8;
      CGetL $parent_members
      .srcloc 27:8,27:8;
      IterInit 0 NK V:$p L0
      .try {
      L1:
        .srcloc 27:8,27:8;
        CGetL $p
        .srcloc 27:8,27:8;
        BaseL $result Define
        .srcloc 27:8,27:8;
        SetM 0 W
        .srcloc 27:8,27:8;
        PopC
        .srcloc 27:8,27:8;
        IterNext 0 NK V:$p L1
        Jmp L0
      } .catch {
        IterFree 0
        Throw
      }
    L0:
      .srcloc 27:8,27:8;
      Jmp L2
    } .catch {
      Dup
      InstanceOfD "ReflectionException"
      JmpZ L3
      SetL $_
      PopC
      .srcloc 27:8,27:8;
      Jmp L2
    L3:
      Throw
    }
  L2:
    .srcloc 27:8,27:8;
    CGetL $result
    .srcloc 27:8,27:8;
    Array @A_0
    VerifyRetTypeTS
    RetC
  }
  .method {}{} [private static "__Memoize"("""y:0:{}""")] (27,27) <"HH\\mixed" N > pu$E$val$memoize_impl(<"HH\\string" "HH\\string" > $atom) {
    .srcloc 27:8,27:8;
    VerifyParamType $atom
    .srcloc 27:8,27:8;
    String "S2"
    .srcloc 27:8,27:8;
    CGetL2 $atom
    Eq
    JmpNZ L0
    Jmp L1
  L0:
    .srcloc 33:13,33:17;
    String "bli"
    .srcloc 27:8,27:8;
    RetC
  L1:
    .srcloc 27:8,27:8;
    NullUninit
    NullUninit
    NullUninit
    .srcloc 27:8,27:8;
    CGetL $atom
    .srcloc 27:8,27:8;
    FCallClsMethodSD <> 1 1 "0" - "" "" Parent "pu$E$val"
    .srcloc 27:8,27:8;
    RetC
    .srcloc 27:9,27:9;
    Null
    RetC
  }
  .method {}{} [private static "__Memoize"("""y:0:{}""")] (27,27) <"HH\\mixed" N > pu$E$x$memoize_impl(<"HH\\string" "HH\\string" > $atom) {
    .srcloc 27:8,27:8;
    VerifyParamType $atom
    .srcloc 27:8,27:8;
    String "S"
    .srcloc 27:8,27:8;
    CGetL2 $atom
    Eq
    JmpNZ L0
    .srcloc 27:8,27:8;
    String "S2"
    .srcloc 27:8,27:8;
    CGetL2 $atom
    Eq
    JmpNZ L1
    Jmp L2
  L0:
    .srcloc 30:11,30:12;
    Int 42
    .srcloc 27:8,27:8;
    RetC
  L1:
    .srcloc 34:11,34:14;
    Int 1664
    .srcloc 27:8,27:8;
    RetC
  L2:
    .srcloc 27:8,27:8;
    NullUninit
    NullUninit
    NullUninit
    .srcloc 27:8,27:8;
    CGetL $atom
    .srcloc 27:8,27:8;
    FCallClsMethodSD <> 1 1 "0" - "" "" Parent "pu$E$x"
    .srcloc 27:8,27:8;
    RetC
    .srcloc 27:9,27:9;
    Null
    RetC
  }
  .method {}{} [public static "__Memoize"("""y:0:{}""") "__Override"("""y:0:{}""")] (27,27) <"HH\\keyset<HH\\string>" "HH\\keyset" extended_hint> pu$E$Members() {
    .ismemoizewrapper;
    .srcloc 27:8,27:8;
    MemoGet L0 L:0+0
    RetC
  L0:
    NullUninit
    NullUninit
    NullUninit
    FCallClsMethodD <> 0 1 "" - "" "" "E" "pu$E$Members$memoize_impl"
    MemoSet L:0+0
    RetC
  }
  .method {}{} [public static "__Memoize"("""y:0:{}""")] (27,27) <"HH\\mixed" N > pu$E$val(<"HH\\string" "HH\\string" > $atom) {
    .ismemoizewrapper;
    .srcloc 27:8,27:8;
    VerifyParamType $atom
    GetMemoKeyL $atom
    SetL _1
    PopC
    MemoGet L0 L:1+1
    RetC
  L0:
    NullUninit
    NullUninit
    NullUninit
    CGetL $atom
    FCallClsMethodD <> 1 1 "" - "" "" "E" "pu$E$val$memoize_impl"
    MemoSet L:1+1
    RetC
  }
  .method {}{} [public static "__Memoize"("""y:0:{}""")] (27,27) <"HH\\mixed" N > pu$E$x(<"HH\\string" "HH\\string" > $atom) {
    .ismemoizewrapper;
    .srcloc 27:8,27:8;
    VerifyParamType $atom
    GetMemoKeyL $atom
    SetL _1
    PopC
    MemoGet L0 L:1+1
    RetC
  L0:
    NullUninit
    NullUninit
    NullUninit
    CGetL $atom
    FCallClsMethodD <> 1 1 "" - "" "" "E" "pu$E$x$memoize_impl"
    MemoSet L:1+1
    RetC
  }
}

.class {} Base (40,40) {
}

.class {} Foo (41,48) extends Base {
  .method {}{} [private static "__Memoize"("""y:0:{}""") "__Override"("""y:0:{}""")] (42,42) <"HH\\keyset<HH\\string>" "HH\\keyset" extended_hint> pu$E$Members$memoize_impl() {
    .numiters 1;
    .declvars $result $class $method $parent_members $p $_;
    .srcloc 42:8,42:8;
    Keyset @A_4
    .srcloc 42:8,42:8;
    SetL $result
    .srcloc 42:8,42:8;
    PopC
    .try {
      .srcloc 42:8,42:8;
      NewObjD "ReflectionClass"
      Dup
      NullUninit
      NullUninit
      .srcloc 42:8,42:8;
      String "Base"
      .srcloc 42:8,42:8;
      FCallCtor <LockWhileUnwinding> 1 1 "0" - "" ""
      PopC
      LockObj
      .srcloc 42:8,42:8;
      SetL $class
      .srcloc 42:8,42:8;
      PopC
      .srcloc 42:8,42:8;
      CGetL $class
      NullUninit
      NullUninit
      .srcloc 42:8,42:8;
      String "pu$E$Members"
      .srcloc 42:8,42:8;
      FCallObjMethodD <> 1 1 "0" - "" "" NullThrows "getMethod"
      .srcloc 42:8,42:8;
      SetL $method
      .srcloc 42:8,42:8;
      PopC
      .srcloc 42:8,42:8;
      CGetL $method
      NullUninit
      NullUninit
      .srcloc 42:8,42:8;
      Null
      .srcloc 42:8,42:8;
      FCallObjMethodD <> 1 1 "0" - "" "" NullThrows "invoke"
      .srcloc 42:8,42:8;
      SetL $parent_members
      .srcloc 42:8,42:8;
      PopC
      .srcloc 42:8,42:8;
      CGetL $parent_members
      .srcloc 42:8,42:8;
      IterInit 0 NK V:$p L0
      .try {
      L1:
        .srcloc 42:8,42:8;
        CGetL $p
        .srcloc 42:8,42:8;
        BaseL $result Define
        .srcloc 42:8,42:8;
        SetM 0 W
        .srcloc 42:8,42:8;
        PopC
        .srcloc 42:8,42:8;
        IterNext 0 NK V:$p L1
        Jmp L0
      } .catch {
        IterFree 0
        Throw
      }
    L0:
      .srcloc 42:8,42:8;
      Jmp L2
    } .catch {
      Dup
      InstanceOfD "ReflectionException"
      JmpZ L3
      SetL $_
      PopC
      .srcloc 42:8,42:8;
      Jmp L2
    L3:
      Throw
    }
  L2:
    .srcloc 42:8,42:8;
    CGetL $result
    .srcloc 42:8,42:8;
    Array @A_0
    VerifyRetTypeTS
    RetC
  }
  .method {}{} [private static "__Memoize"("""y:0:{}""")] (42,42) <"HH\\mixed" N > pu$E$foo$memoize_impl(<"HH\\string" "HH\\string" > $atom) {
    .srcloc 42:8,42:8;
    VerifyParamType $atom
    .srcloc 42:8,42:8;
    String "X"
    .srcloc 42:8,42:8;
    CGetL2 $atom
    Eq
    JmpNZ L0
    Jmp L1
  L0:
    .srcloc 45:13,45:15;
    String "X"
    .srcloc 42:8,42:8;
    RetC
  L1:
    .srcloc 42:8,42:8;
    NullUninit
    NullUninit
    NullUninit
    .srcloc 42:8,42:8;
    CGetL $atom
    .srcloc 42:8,42:8;
    FCallClsMethodSD <> 1 1 "0" - "" "" Parent "pu$E$foo"
    .srcloc 42:8,42:8;
    RetC
    .srcloc 42:9,42:9;
    Null
    RetC
  }
  .method {}{} [public static "__Memoize"("""y:0:{}""") "__Override"("""y:0:{}""")] (42,42) <"HH\\keyset<HH\\string>" "HH\\keyset" extended_hint> pu$E$Members() {
    .ismemoizewrapper;
    .srcloc 42:8,42:8;
    MemoGet L0 L:0+0
    RetC
  L0:
    NullUninit
    NullUninit
    NullUninit
    FCallClsMethodD <> 0 1 "" - "" "" "Foo" "pu$E$Members$memoize_impl"
    MemoSet L:0+0
    RetC
  }
  .method {}{} [public static "__Memoize"("""y:0:{}""")] (42,42) <"HH\\mixed" N > pu$E$foo(<"HH\\string" "HH\\string" > $atom) {
    .ismemoizewrapper;
    .srcloc 42:8,42:8;
    VerifyParamType $atom
    GetMemoKeyL $atom
    SetL _1
    PopC
    MemoGet L0 L:1+1
    RetC
  L0:
    NullUninit
    NullUninit
    NullUninit
    CGetL $atom
    FCallClsMethodD <> 1 1 "" - "" "" "Foo" "pu$E$foo$memoize_impl"
    MemoSet L:1+1
    RetC
  }
}

# members2.good.php ends here
