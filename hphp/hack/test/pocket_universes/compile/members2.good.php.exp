# members2.good.php starts here

.filepath "members2.good.php";

.hh_file 1;
.adata A_0 = """k:1:{s:1:\"S\";}""";
.adata A_1 = """k:1:{s:2:\"S2\";}""";
.adata A_2 = """k:2:{s:1:\"S\";s:2:\"S2\";}""";
.adata A_3 = """k:1:{s:1:\"X\";}""";

.main (1,1) {
  .srcloc 3:7,3:7;
  DefCls 0
  .srcloc 10:7,10:7;
  DefCls 1
  .srcloc 20:7,20:7;
  DefCls 2
  .srcloc 29:7,29:10;
  DefCls 3
  .srcloc 30:7,30:9;
  DefCls 4
  Int 1
  RetC
}

.function ["__EntryPoint"("""y:0:{}""")] (38,70) <"HH\\void" N > main() {
  .numiters 1;
  .declvars $k;
  .srcloc 39:8,39:25;
  String "Members in Foo\n"
  .srcloc 39:3,39:26;
  Print
  .srcloc 39:3,39:26;
  PopC
  .srcloc 40:12,40:28;
  NullUninit
  NullUninit
  NullUninit
  .srcloc 40:12,40:28;
  FCallClsMethodD <> 0 1 "" - "" "" "Foo" "pu$E$Members"
  .srcloc 40:12,40:28;
  IterInit 0 NK V:$k L0
  .try {
  L1:
    .srcloc 41:10,41:11;
    CGetL $k
    .srcloc 41:5,41:12;
    Print
    .srcloc 41:5,41:12;
    PopC
    .srcloc 42:10,42:13;
    String "\n"
    .srcloc 42:5,42:14;
    Print
    .srcloc 42:5,42:14;
    PopC
    .srcloc 40:3,43:69;
    IterNext 0 NK V:$k L1
    Jmp L0
  } .catch {
    IterFree 0
    Throw
  }
L0:
  .srcloc 45:8,45:23;
  String "Members in C\n"
  .srcloc 45:3,45:24;
  Print
  .srcloc 45:3,45:24;
  PopC
  .srcloc 46:12,46:26;
  NullUninit
  NullUninit
  NullUninit
  .srcloc 46:12,46:26;
  FCallClsMethodD <> 0 1 "" - "" "" "C" "pu$E$Members"
  .srcloc 46:12,46:26;
  IterInit 0 NK V:$k L2
  .try {
  L3:
    .srcloc 47:10,47:11;
    CGetL $k
    .srcloc 47:5,47:12;
    Print
    .srcloc 47:5,47:12;
    PopC
    .srcloc 48:10,48:13;
    String "\n"
    .srcloc 48:5,48:14;
    Print
    .srcloc 48:5,48:14;
    PopC
    .srcloc 46:3,49:67;
    IterNext 0 NK V:$k L3
    Jmp L2
  } .catch {
    IterFree 0
    Throw
  }
L2:
  .srcloc 51:8,51:23;
  String "Members in D\n"
  .srcloc 51:3,51:24;
  Print
  .srcloc 51:3,51:24;
  PopC
  .srcloc 52:8,52:17;
  String "From E\n"
  .srcloc 52:3,52:18;
  Print
  .srcloc 52:3,52:18;
  PopC
  .srcloc 53:12,53:26;
  NullUninit
  NullUninit
  NullUninit
  .srcloc 53:12,53:26;
  FCallClsMethodD <> 0 1 "" - "" "" "D" "pu$E$Members"
  .srcloc 53:12,53:26;
  IterInit 0 NK V:$k L4
  .try {
  L5:
    .srcloc 54:10,54:11;
    CGetL $k
    .srcloc 54:5,54:12;
    Print
    .srcloc 54:5,54:12;
    PopC
    .srcloc 55:10,55:13;
    String "\n"
    .srcloc 55:5,55:14;
    Print
    .srcloc 55:5,55:14;
    PopC
    .srcloc 53:3,56:67;
    IterNext 0 NK V:$k L5
    Jmp L4
  } .catch {
    IterFree 0
    Throw
  }
L4:
  .srcloc 57:8,57:17;
  String "From F\n"
  .srcloc 57:3,57:18;
  Print
  .srcloc 57:3,57:18;
  PopC
  .srcloc 58:12,58:26;
  NullUninit
  NullUninit
  NullUninit
  .srcloc 58:12,58:26;
  FCallClsMethodD <> 0 1 "" - "" "" "D" "pu$F$Members"
  .srcloc 58:12,58:26;
  IterInit 0 NK V:$k L6
  .try {
  L7:
    .srcloc 59:10,59:11;
    CGetL $k
    .srcloc 59:5,59:12;
    Print
    .srcloc 59:5,59:12;
    PopC
    .srcloc 60:10,60:13;
    String "\n"
    .srcloc 60:5,60:14;
    Print
    .srcloc 60:5,60:14;
    PopC
    .srcloc 58:3,61:67;
    IterNext 0 NK V:$k L7
    Jmp L6
  } .catch {
    IterFree 0
    Throw
  }
L6:
  .srcloc 63:8,63:23;
  String "Members in E\n"
  .srcloc 63:3,63:24;
  Print
  .srcloc 63:3,63:24;
  PopC
  .srcloc 64:12,64:26;
  NullUninit
  NullUninit
  NullUninit
  .srcloc 64:12,64:26;
  FCallClsMethodD <> 0 1 "" - "" "" "E" "pu$E$Members"
  .srcloc 64:12,64:26;
  IterInit 0 NK V:$k L8
  .try {
  L9:
    .srcloc 65:10,65:11;
    CGetL $k
    .srcloc 65:5,65:12;
    Print
    .srcloc 65:5,65:12;
    PopC
    .srcloc 66:10,66:12;
    String " "
    .srcloc 66:5,66:13;
    Print
    .srcloc 66:5,66:13;
    PopC
    .srcloc 67:10,67:20;
    NullUninit
    NullUninit
    NullUninit
    .srcloc 67:18,67:19;
    CGetL $k
    .srcloc 67:10,67:20;
    FCallClsMethodD <> 1 1 "0" - "" "" "E" "pu$E$x"
    .srcloc 67:5,67:21;
    Print
    .srcloc 67:5,67:21;
    PopC
    .srcloc 68:10,68:13;
    String "\n"
    .srcloc 68:5,68:14;
    Print
    .srcloc 68:5,68:14;
    PopC
    .srcloc 64:3,69:103;
    IterNext 0 NK V:$k L9
    Jmp L8
  } .catch {
    IterFree 0
    Throw
  }
L8:
  .srcloc 70:2,70:2;
  Null
  RetC
}

.class C (3,8) {
  .method [private static "__Memoize"("""y:0:{}""")] (4,4) <"HH\\void" N > pu$E$Members$memoize_impl() {
    .srcloc 4:8,4:8;
    Keyset @A_0
    .srcloc 4:8,4:8;
    RetC
  }
  .method [private static "__Memoize"("""y:0:{}""")] (4,4) <"HH\\mixed" N > pu$E$val$memoize_impl(<"HH\\string" "HH\\string" > $atom) {
    .srcloc 4:8,4:8;
    VerifyParamType $atom
    .srcloc 4:8,4:8;
    String "S"
    .srcloc 4:8,4:8;
    CGetL2 $atom
    Eq
    JmpNZ L0
    Jmp L1
  L0:
    .srcloc 6:15,6:21;
    String "Hello"
    .srcloc 4:8,4:8;
    RetC
  L1:
    .srcloc 4:8,4:8;
    NewObjD "Exception"
    Dup
    NullUninit
    NullUninit
    .srcloc 4:8,4:8;
    String "\\C:@E::val unknown atom access: "
    .srcloc 4:8,4:8;
    CGetL $atom
    Concat
    .srcloc 4:8,4:8;
    FCallCtor <LockWhileUnwinding> 1 1 "0" - "" ""
    PopC
    LockObj
    .srcloc 4:8,4:8;
    Throw
    .srcloc 4:9,4:9;
    Null
    RetC
  }
  .method [public static "__Memoize"("""y:0:{}""")] (4,4) <"HH\\void" N > pu$E$Members() {
    .ismemoizewrapper;
    .srcloc 4:8,4:8;
    MemoGet L0 L:0+0
    RetC
  L0:
    NullUninit
    NullUninit
    NullUninit
    FCallClsMethodD <> 0 1 "" - "" "" "C" "pu$E$Members$memoize_impl"
    MemoSet L:0+0
    RetC
  }
  .method [public static "__Memoize"("""y:0:{}""")] (4,4) <"HH\\mixed" N > pu$E$val(<"HH\\string" "HH\\string" > $atom) {
    .ismemoizewrapper;
    .srcloc 4:8,4:8;
    VerifyParamType $atom
    GetMemoKeyL $atom
    SetL _1
    PopC
    MemoGet L0 L:1+1
    RetC
  L0:
    NullUninit
    NullUninit
    NullUninit
    CGetL $atom
    FCallClsMethodD <> 1 1 "" - "" "" "C" "pu$E$val$memoize_impl"
    MemoSet L:1+1
    RetC
  }
}

.class D (10,18) extends C {
  .method [private static "__Memoize"("""y:0:{}""") "__Override"("""y:0:{}""")] (11,11) <"HH\\void" N > pu$E$Members$memoize_impl() {
    .numiters 1;
    .declvars $result $class $method $parent_members $p $_;
    .srcloc 11:8,11:8;
    Keyset @A_1
    .srcloc 11:8,11:8;
    SetL $result
    .srcloc 11:8,11:8;
    PopC
    .srcloc 11:8,11:8;
    NewObjD "ReflectionClass"
    Dup
    NullUninit
    NullUninit
    .srcloc 11:8,11:8;
    String "C"
    .srcloc 11:8,11:8;
    FCallCtor <LockWhileUnwinding> 1 1 "0" - "" ""
    PopC
    LockObj
    .srcloc 11:8,11:8;
    SetL $class
    .srcloc 11:8,11:8;
    PopC
    .try {
      .srcloc 11:8,11:8;
      CGetL $class
      NullUninit
      NullUninit
      .srcloc 11:8,11:8;
      String "pu$E$Members"
      .srcloc 11:8,11:8;
      FCallObjMethodD <> 1 1 "0" - "" "" NullThrows "getMethod"
      .srcloc 11:8,11:8;
      SetL $method
      .srcloc 11:8,11:8;
      PopC
      .srcloc 11:8,11:8;
      CGetL $method
      NullUninit
      NullUninit
      .srcloc 11:8,11:8;
      Null
      .srcloc 11:8,11:8;
      FCallObjMethodD <> 1 1 "0" - "" "" NullThrows "invoke"
      .srcloc 11:8,11:8;
      SetL $parent_members
      .srcloc 11:8,11:8;
      PopC
      .srcloc 11:8,11:8;
      CGetL $parent_members
      .srcloc 11:8,11:8;
      IterInit 0 NK V:$p L0
      .try {
      L1:
        .srcloc 11:8,11:8;
        CGetL $p
        .srcloc 11:8,11:8;
        BaseL $result Define
        .srcloc 11:8,11:8;
        SetM 0 W
        .srcloc 11:8,11:8;
        PopC
        .srcloc 11:8,11:8;
        IterNext 0 NK V:$p L1
        Jmp L0
      } .catch {
        IterFree 0
        Throw
      }
    L0:
      .srcloc 11:8,11:8;
      Jmp L2
    } .catch {
      Dup
      InstanceOfD "ReflectionException"
      JmpZ L3
      SetL $_
      PopC
      .srcloc 11:8,11:8;
      Jmp L2
    L3:
      Throw
    }
  L2:
    .srcloc 11:8,11:8;
    CGetL $result
    .srcloc 11:8,11:8;
    RetC
  }
  .method [private static "__Memoize"("""y:0:{}""")] (11,11) <"HH\\mixed" N > pu$E$val$memoize_impl(<"HH\\string" "HH\\string" > $atom) {
    .srcloc 11:8,11:8;
    VerifyParamType $atom
    .srcloc 11:8,11:8;
    String "S2"
    .srcloc 11:8,11:8;
    CGetL2 $atom
    Eq
    JmpNZ L0
    Jmp L1
  L0:
    .srcloc 12:16,12:22;
    String "youpi"
    .srcloc 11:8,11:8;
    RetC
  L1:
    .srcloc 11:8,11:8;
    NullUninit
    NullUninit
    NullUninit
    .srcloc 11:8,11:8;
    CGetL $atom
    .srcloc 11:8,11:8;
    FCallClsMethodSD <> 1 1 "0" - "" "" Parent "pu$E$val"
    .srcloc 11:8,11:8;
    RetC
    .srcloc 11:9,11:9;
    Null
    RetC
  }
  .method [private static "__Memoize"("""y:0:{}""") "__Override"("""y:0:{}""")] (14,14) <"HH\\void" N > pu$F$Members$memoize_impl() {
    .numiters 1;
    .declvars $result $class $method $parent_members $p $_;
    .srcloc 14:8,14:8;
    Keyset @A_0
    .srcloc 14:8,14:8;
    SetL $result
    .srcloc 14:8,14:8;
    PopC
    .srcloc 14:8,14:8;
    NewObjD "ReflectionClass"
    Dup
    NullUninit
    NullUninit
    .srcloc 14:8,14:8;
    String "C"
    .srcloc 14:8,14:8;
    FCallCtor <LockWhileUnwinding> 1 1 "0" - "" ""
    PopC
    LockObj
    .srcloc 14:8,14:8;
    SetL $class
    .srcloc 14:8,14:8;
    PopC
    .try {
      .srcloc 14:8,14:8;
      CGetL $class
      NullUninit
      NullUninit
      .srcloc 14:8,14:8;
      String "pu$F$Members"
      .srcloc 14:8,14:8;
      FCallObjMethodD <> 1 1 "0" - "" "" NullThrows "getMethod"
      .srcloc 14:8,14:8;
      SetL $method
      .srcloc 14:8,14:8;
      PopC
      .srcloc 14:8,14:8;
      CGetL $method
      NullUninit
      NullUninit
      .srcloc 14:8,14:8;
      Null
      .srcloc 14:8,14:8;
      FCallObjMethodD <> 1 1 "0" - "" "" NullThrows "invoke"
      .srcloc 14:8,14:8;
      SetL $parent_members
      .srcloc 14:8,14:8;
      PopC
      .srcloc 14:8,14:8;
      CGetL $parent_members
      .srcloc 14:8,14:8;
      IterInit 0 NK V:$p L0
      .try {
      L1:
        .srcloc 14:8,14:8;
        CGetL $p
        .srcloc 14:8,14:8;
        BaseL $result Define
        .srcloc 14:8,14:8;
        SetM 0 W
        .srcloc 14:8,14:8;
        PopC
        .srcloc 14:8,14:8;
        IterNext 0 NK V:$p L1
        Jmp L0
      } .catch {
        IterFree 0
        Throw
      }
    L0:
      .srcloc 14:8,14:8;
      Jmp L2
    } .catch {
      Dup
      InstanceOfD "ReflectionException"
      JmpZ L3
      SetL $_
      PopC
      .srcloc 14:8,14:8;
      Jmp L2
    L3:
      Throw
    }
  L2:
    .srcloc 14:8,14:8;
    CGetL $result
    .srcloc 14:8,14:8;
    RetC
  }
  .method [private static "__Memoize"("""y:0:{}""")] (14,14) <"HH\\mixed" N > pu$F$fal$memoize_impl(<"HH\\string" "HH\\string" > $atom) {
    .srcloc 14:8,14:8;
    VerifyParamType $atom
    .srcloc 14:8,14:8;
    String "S"
    .srcloc 14:8,14:8;
    CGetL2 $atom
    Eq
    JmpNZ L0
    Jmp L1
  L0:
    .srcloc 16:16,16:20;
    String "blu"
    .srcloc 14:8,14:8;
    RetC
  L1:
    .srcloc 14:8,14:8;
    NullUninit
    NullUninit
    NullUninit
    .srcloc 14:8,14:8;
    CGetL $atom
    .srcloc 14:8,14:8;
    FCallClsMethodSD <> 1 1 "0" - "" "" Parent "pu$F$fal"
    .srcloc 14:8,14:8;
    RetC
    .srcloc 14:9,14:9;
    Null
    RetC
  }
  .method [public static "__Memoize"("""y:0:{}""") "__Override"("""y:0:{}""")] (11,11) <"HH\\void" N > pu$E$Members() {
    .ismemoizewrapper;
    .srcloc 11:8,11:8;
    MemoGet L0 L:0+0
    RetC
  L0:
    NullUninit
    NullUninit
    NullUninit
    FCallClsMethodD <> 0 1 "" - "" "" "D" "pu$E$Members$memoize_impl"
    MemoSet L:0+0
    RetC
  }
  .method [public static "__Memoize"("""y:0:{}""")] (11,11) <"HH\\mixed" N > pu$E$val(<"HH\\string" "HH\\string" > $atom) {
    .ismemoizewrapper;
    .srcloc 11:8,11:8;
    VerifyParamType $atom
    GetMemoKeyL $atom
    SetL _1
    PopC
    MemoGet L0 L:1+1
    RetC
  L0:
    NullUninit
    NullUninit
    NullUninit
    CGetL $atom
    FCallClsMethodD <> 1 1 "" - "" "" "D" "pu$E$val$memoize_impl"
    MemoSet L:1+1
    RetC
  }
  .method [public static "__Memoize"("""y:0:{}""") "__Override"("""y:0:{}""")] (14,14) <"HH\\void" N > pu$F$Members() {
    .ismemoizewrapper;
    .srcloc 14:8,14:8;
    MemoGet L0 L:0+0
    RetC
  L0:
    NullUninit
    NullUninit
    NullUninit
    FCallClsMethodD <> 0 1 "" - "" "" "D" "pu$F$Members$memoize_impl"
    MemoSet L:0+0
    RetC
  }
  .method [public static "__Memoize"("""y:0:{}""")] (14,14) <"HH\\mixed" N > pu$F$fal(<"HH\\string" "HH\\string" > $atom) {
    .ismemoizewrapper;
    .srcloc 14:8,14:8;
    VerifyParamType $atom
    GetMemoKeyL $atom
    SetL _1
    PopC
    MemoGet L0 L:1+1
    RetC
  L0:
    NullUninit
    NullUninit
    NullUninit
    CGetL $atom
    FCallClsMethodD <> 1 1 "" - "" "" "D" "pu$F$fal$memoize_impl"
    MemoSet L:1+1
    RetC
  }
}

.class E (20,26) extends C {
  .method [private static "__Memoize"("""y:0:{}""") "__Override"("""y:0:{}""")] (21,21) <"HH\\void" N > pu$E$Members$memoize_impl() {
    .numiters 1;
    .declvars $result $class $method $parent_members $p $_;
    .srcloc 21:8,21:8;
    Keyset @A_2
    .srcloc 21:8,21:8;
    SetL $result
    .srcloc 21:8,21:8;
    PopC
    .srcloc 21:8,21:8;
    NewObjD "ReflectionClass"
    Dup
    NullUninit
    NullUninit
    .srcloc 21:8,21:8;
    String "C"
    .srcloc 21:8,21:8;
    FCallCtor <LockWhileUnwinding> 1 1 "0" - "" ""
    PopC
    LockObj
    .srcloc 21:8,21:8;
    SetL $class
    .srcloc 21:8,21:8;
    PopC
    .try {
      .srcloc 21:8,21:8;
      CGetL $class
      NullUninit
      NullUninit
      .srcloc 21:8,21:8;
      String "pu$E$Members"
      .srcloc 21:8,21:8;
      FCallObjMethodD <> 1 1 "0" - "" "" NullThrows "getMethod"
      .srcloc 21:8,21:8;
      SetL $method
      .srcloc 21:8,21:8;
      PopC
      .srcloc 21:8,21:8;
      CGetL $method
      NullUninit
      NullUninit
      .srcloc 21:8,21:8;
      Null
      .srcloc 21:8,21:8;
      FCallObjMethodD <> 1 1 "0" - "" "" NullThrows "invoke"
      .srcloc 21:8,21:8;
      SetL $parent_members
      .srcloc 21:8,21:8;
      PopC
      .srcloc 21:8,21:8;
      CGetL $parent_members
      .srcloc 21:8,21:8;
      IterInit 0 NK V:$p L0
      .try {
      L1:
        .srcloc 21:8,21:8;
        CGetL $p
        .srcloc 21:8,21:8;
        BaseL $result Define
        .srcloc 21:8,21:8;
        SetM 0 W
        .srcloc 21:8,21:8;
        PopC
        .srcloc 21:8,21:8;
        IterNext 0 NK V:$p L1
        Jmp L0
      } .catch {
        IterFree 0
        Throw
      }
    L0:
      .srcloc 21:8,21:8;
      Jmp L2
    } .catch {
      Dup
      InstanceOfD "ReflectionException"
      JmpZ L3
      SetL $_
      PopC
      .srcloc 21:8,21:8;
      Jmp L2
    L3:
      Throw
    }
  L2:
    .srcloc 21:8,21:8;
    CGetL $result
    .srcloc 21:8,21:8;
    RetC
  }
  .method [private static "__Memoize"("""y:0:{}""")] (21,21) <"HH\\mixed" N > pu$E$x$memoize_impl(<"HH\\string" "HH\\string" > $atom) {
    .srcloc 21:8,21:8;
    VerifyParamType $atom
    .srcloc 21:8,21:8;
    String "S"
    .srcloc 21:8,21:8;
    CGetL2 $atom
    Eq
    JmpNZ L0
    .srcloc 21:8,21:8;
    String "S2"
    .srcloc 21:8,21:8;
    CGetL2 $atom
    Eq
    JmpNZ L1
    Jmp L2
  L0:
    .srcloc 23:13,23:14;
    Int 42
    .srcloc 21:8,21:8;
    RetC
  L1:
    .srcloc 24:27,24:30;
    Int 1664
    .srcloc 21:8,21:8;
    RetC
  L2:
    .srcloc 21:8,21:8;
    NullUninit
    NullUninit
    NullUninit
    .srcloc 21:8,21:8;
    CGetL $atom
    .srcloc 21:8,21:8;
    FCallClsMethodSD <> 1 1 "0" - "" "" Parent "pu$E$x"
    .srcloc 21:8,21:8;
    RetC
    .srcloc 21:9,21:9;
    Null
    RetC
  }
  .method [private static "__Memoize"("""y:0:{}""")] (21,21) <"HH\\mixed" N > pu$E$val$memoize_impl(<"HH\\string" "HH\\string" > $atom) {
    .srcloc 21:8,21:8;
    VerifyParamType $atom
    .srcloc 21:8,21:8;
    String "S2"
    .srcloc 21:8,21:8;
    CGetL2 $atom
    Eq
    JmpNZ L0
    Jmp L1
  L0:
    .srcloc 24:16,24:20;
    String "bli"
    .srcloc 21:8,21:8;
    RetC
  L1:
    .srcloc 21:8,21:8;
    NullUninit
    NullUninit
    NullUninit
    .srcloc 21:8,21:8;
    CGetL $atom
    .srcloc 21:8,21:8;
    FCallClsMethodSD <> 1 1 "0" - "" "" Parent "pu$E$val"
    .srcloc 21:8,21:8;
    RetC
    .srcloc 21:9,21:9;
    Null
    RetC
  }
  .method [public static "__Memoize"("""y:0:{}""") "__Override"("""y:0:{}""")] (21,21) <"HH\\void" N > pu$E$Members() {
    .ismemoizewrapper;
    .srcloc 21:8,21:8;
    MemoGet L0 L:0+0
    RetC
  L0:
    NullUninit
    NullUninit
    NullUninit
    FCallClsMethodD <> 0 1 "" - "" "" "E" "pu$E$Members$memoize_impl"
    MemoSet L:0+0
    RetC
  }
  .method [public static "__Memoize"("""y:0:{}""")] (21,21) <"HH\\mixed" N > pu$E$x(<"HH\\string" "HH\\string" > $atom) {
    .ismemoizewrapper;
    .srcloc 21:8,21:8;
    VerifyParamType $atom
    GetMemoKeyL $atom
    SetL _1
    PopC
    MemoGet L0 L:1+1
    RetC
  L0:
    NullUninit
    NullUninit
    NullUninit
    CGetL $atom
    FCallClsMethodD <> 1 1 "" - "" "" "E" "pu$E$x$memoize_impl"
    MemoSet L:1+1
    RetC
  }
  .method [public static "__Memoize"("""y:0:{}""")] (21,21) <"HH\\mixed" N > pu$E$val(<"HH\\string" "HH\\string" > $atom) {
    .ismemoizewrapper;
    .srcloc 21:8,21:8;
    VerifyParamType $atom
    GetMemoKeyL $atom
    SetL _1
    PopC
    MemoGet L0 L:1+1
    RetC
  L0:
    NullUninit
    NullUninit
    NullUninit
    CGetL $atom
    FCallClsMethodD <> 1 1 "" - "" "" "E" "pu$E$val$memoize_impl"
    MemoSet L:1+1
    RetC
  }
}

.class Base (29,29) {
}

.class Foo (30,35) extends Base {
  .method [private static "__Memoize"("""y:0:{}""") "__Override"("""y:0:{}""")] (31,31) <"HH\\void" N > pu$E$Members$memoize_impl() {
    .numiters 1;
    .declvars $result $class $method $parent_members $p $_;
    .srcloc 31:8,31:8;
    Keyset @A_3
    .srcloc 31:8,31:8;
    SetL $result
    .srcloc 31:8,31:8;
    PopC
    .srcloc 31:8,31:8;
    NewObjD "ReflectionClass"
    Dup
    NullUninit
    NullUninit
    .srcloc 31:8,31:8;
    String "Base"
    .srcloc 31:8,31:8;
    FCallCtor <LockWhileUnwinding> 1 1 "0" - "" ""
    PopC
    LockObj
    .srcloc 31:8,31:8;
    SetL $class
    .srcloc 31:8,31:8;
    PopC
    .try {
      .srcloc 31:8,31:8;
      CGetL $class
      NullUninit
      NullUninit
      .srcloc 31:8,31:8;
      String "pu$E$Members"
      .srcloc 31:8,31:8;
      FCallObjMethodD <> 1 1 "0" - "" "" NullThrows "getMethod"
      .srcloc 31:8,31:8;
      SetL $method
      .srcloc 31:8,31:8;
      PopC
      .srcloc 31:8,31:8;
      CGetL $method
      NullUninit
      NullUninit
      .srcloc 31:8,31:8;
      Null
      .srcloc 31:8,31:8;
      FCallObjMethodD <> 1 1 "0" - "" "" NullThrows "invoke"
      .srcloc 31:8,31:8;
      SetL $parent_members
      .srcloc 31:8,31:8;
      PopC
      .srcloc 31:8,31:8;
      CGetL $parent_members
      .srcloc 31:8,31:8;
      IterInit 0 NK V:$p L0
      .try {
      L1:
        .srcloc 31:8,31:8;
        CGetL $p
        .srcloc 31:8,31:8;
        BaseL $result Define
        .srcloc 31:8,31:8;
        SetM 0 W
        .srcloc 31:8,31:8;
        PopC
        .srcloc 31:8,31:8;
        IterNext 0 NK V:$p L1
        Jmp L0
      } .catch {
        IterFree 0
        Throw
      }
    L0:
      .srcloc 31:8,31:8;
      Jmp L2
    } .catch {
      Dup
      InstanceOfD "ReflectionException"
      JmpZ L3
      SetL $_
      PopC
      .srcloc 31:8,31:8;
      Jmp L2
    L3:
      Throw
    }
  L2:
    .srcloc 31:8,31:8;
    CGetL $result
    .srcloc 31:8,31:8;
    RetC
  }
  .method [private static "__Memoize"("""y:0:{}""")] (31,31) <"HH\\mixed" N > pu$E$foo$memoize_impl(<"HH\\string" "HH\\string" > $atom) {
    .srcloc 31:8,31:8;
    VerifyParamType $atom
    .srcloc 31:8,31:8;
    String "X"
    .srcloc 31:8,31:8;
    CGetL2 $atom
    Eq
    JmpNZ L0
    Jmp L1
  L0:
    .srcloc 33:14,33:16;
    String "X"
    .srcloc 31:8,31:8;
    RetC
  L1:
    .srcloc 31:8,31:8;
    NullUninit
    NullUninit
    NullUninit
    .srcloc 31:8,31:8;
    CGetL $atom
    .srcloc 31:8,31:8;
    FCallClsMethodSD <> 1 1 "0" - "" "" Parent "pu$E$foo"
    .srcloc 31:8,31:8;
    RetC
    .srcloc 31:9,31:9;
    Null
    RetC
  }
  .method [public static "__Memoize"("""y:0:{}""") "__Override"("""y:0:{}""")] (31,31) <"HH\\void" N > pu$E$Members() {
    .ismemoizewrapper;
    .srcloc 31:8,31:8;
    MemoGet L0 L:0+0
    RetC
  L0:
    NullUninit
    NullUninit
    NullUninit
    FCallClsMethodD <> 0 1 "" - "" "" "Foo" "pu$E$Members$memoize_impl"
    MemoSet L:0+0
    RetC
  }
  .method [public static "__Memoize"("""y:0:{}""")] (31,31) <"HH\\mixed" N > pu$E$foo(<"HH\\string" "HH\\string" > $atom) {
    .ismemoizewrapper;
    .srcloc 31:8,31:8;
    VerifyParamType $atom
    GetMemoKeyL $atom
    SetL _1
    PopC
    MemoGet L0 L:1+1
    RetC
  L0:
    NullUninit
    NullUninit
    NullUninit
    CGetL $atom
    FCallClsMethodD <> 1 1 "" - "" "" "Foo" "pu$E$foo$memoize_impl"
    MemoSet L:1+1
    RetC
  }
}

# members2.good.php ends here
