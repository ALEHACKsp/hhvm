<?hh
function generic<T>(): int {
  throw new \Exception();
}
class C extends \A {}
class A0 {}
class E<T> extends \D<T, int> {}
class A extends \A0 implements \I1 {}
class B implements \I1 {}
class D<Tfirst, Tsecond> extends \B {}
function with_generics<Tfirst, Tsecond>(
  D<Tfirst, Tsecond> $d,
  E<Tfirst> $e,
): int {
  return generic<C>();
}
interface I1 {}
<<__Rx>>
function extract_standalone_make_default(): nothing {
  throw new \Exception();
}
/* HH_FIXME[4101] */
type EXTRACT_STANDALONE_ANY = \EXTRACT_STANDALONE_ANY_;
type EXTRACT_STANDALONE_ANY_<T> = T;
