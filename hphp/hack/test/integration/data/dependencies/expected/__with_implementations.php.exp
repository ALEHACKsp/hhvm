<?hh
function with_implementations(BB $b, II $i, CC $c): void {
  $b->f();
  $_ = $i->g();
}
final class CC extends \BB implements \II {
  public function g(): int {
    throw new \Exception();
  }
  public function f(): void {
    throw new \Exception();
  }
  const type T = int;
}
abstract class BB {
  abstract public function f(): void;
}
interface II {
  public function g(): this::T;
  abstract const type T;
}
<<__Rx>>
function extract_standalone_make_default(): nothing {
  throw new \Exception();
}
/* HH_FIXME[4101] */
type EXTRACT_STANDALONE_ANY = \EXTRACT_STANDALONE_ANY_;
type EXTRACT_STANDALONE_ANY_<T> = T;
