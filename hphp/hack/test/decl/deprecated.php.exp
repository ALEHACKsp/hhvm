[("\\DeprecatedClass",
  (Shallow_decl_defs.Class
     { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
       sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cnormal;
       sc_name = ([3:7-22], "\\DeprecatedClass"); sc_tparams = [];
       sc_where_constraints = []; sc_extends = []; sc_uses = [];
       sc_xhp_attr_uses = []; sc_req_extends = []; sc_req_implements = [];
       sc_implements = []; sc_implements_dynamic = false; sc_consts = [];
       sc_typeconsts = []; sc_pu_enums = []; sc_props = []; sc_sprops = [];
       sc_constructor = None; sc_static_methods = [];
       sc_methods =
       [{ Shallow_decl_defs.sm_abstract = false; sm_final = false;
          sm_memoizelsb = false; sm_name = ([5:19-22], "foo");
          sm_override = false; sm_dynamicallycallable = false;
          sm_reactivity = None;
          sm_type =
          (Rwitness (root|deprecated.php line 5, characters 19-21),
           (Tfun
              { ft_arity = (Fstandard ()); ft_tparams = [];
                ft_where_constraints = []; ft_params = [];
                ft_implicit_params =
                { capability =
                  (Rhint (root|deprecated.php line 5, characters 19-21),
                   (Tapply (([5:19-22], "\\HH\\Contexts\\defaults"), [])))
                  };
                ft_ret =
                { et_enforced = false;
                  et_type =
                  (Rhint (root|deprecated.php line 5, characters 26-29),
                   (Tprim Tvoid))
                  };
                ft_flags =
                (make_ft_flags FSync None ~return_disposable:false
                  ~returns_mutable:false ~returns_void_to_rx:false);
                ft_reactive = Nonreactive; ft_ifc_decl = FDPolicied {PUBLIC}
                }));
          sm_visibility = Public;
          sm_deprecated =
          (Some "The method foo is deprecated: use bar() instead") };
         { Shallow_decl_defs.sm_abstract = false; sm_final = false;
           sm_memoizelsb = false; sm_name = ([8:19-22], "bar");
           sm_override = false; sm_dynamicallycallable = false;
           sm_reactivity = None;
           sm_type =
           (Rwitness (root|deprecated.php line 8, characters 19-21),
            (Tfun
               { ft_arity = (Fstandard ()); ft_tparams = [];
                 ft_where_constraints = []; ft_params = [];
                 ft_implicit_params =
                 { capability =
                   (Rhint (root|deprecated.php line 8, characters 19-21),
                    (Tapply (([8:19-22], "\\HH\\Contexts\\defaults"), [])))
                   };
                 ft_ret =
                 { et_enforced = false;
                   et_type =
                   (Rhint (root|deprecated.php line 8, characters 26-29),
                    (Tprim Tvoid))
                   };
                 ft_flags =
                 (make_ft_flags FSync None ~return_disposable:false
                   ~returns_mutable:false ~returns_void_to_rx:false);
                 ft_reactive = Nonreactive; ft_ifc_decl = FDPolicied {PUBLIC}
                 }));
           sm_visibility = Public; sm_deprecated = None };
         { Shallow_decl_defs.sm_abstract = false; sm_final = false;
           sm_memoizelsb = false; sm_name = ([11:19-22], "baz");
           sm_override = false; sm_dynamicallycallable = false;
           sm_reactivity = None;
           sm_type =
           (Rwitness (root|deprecated.php line 11, characters 19-21),
            (Tfun
               { ft_arity = (Fstandard ()); ft_tparams = [];
                 ft_where_constraints = []; ft_params = [];
                 ft_implicit_params =
                 { capability =
                   (Rhint (root|deprecated.php line 11, characters 19-21),
                    (Tapply (([11:19-22], "\\HH\\Contexts\\defaults"), [])))
                   };
                 ft_ret =
                 { et_enforced = false;
                   et_type =
                   (Rhint (root|deprecated.php line 11, characters 26-29),
                    (Tprim Tvoid))
                   };
                 ft_flags =
                 (make_ft_flags FSync None ~return_disposable:false
                   ~returns_mutable:false ~returns_void_to_rx:false);
                 ft_reactive = Nonreactive; ft_ifc_decl = FDPolicied {PUBLIC}
                 }));
           sm_visibility = Public; sm_deprecated = None };
         { Shallow_decl_defs.sm_abstract = false; sm_final = false;
           sm_memoizelsb = false; sm_name = ([14:19-23], "foo2");
           sm_override = false; sm_dynamicallycallable = false;
           sm_reactivity = None;
           sm_type =
           (Rwitness (root|deprecated.php line 14, characters 19-22),
            (Tfun
               { ft_arity = (Fstandard ()); ft_tparams = [];
                 ft_where_constraints = []; ft_params = [];
                 ft_implicit_params =
                 { capability =
                   (Rhint (root|deprecated.php line 14, characters 19-22),
                    (Tapply (([14:19-23], "\\HH\\Contexts\\defaults"), [])))
                   };
                 ft_ret =
                 { et_enforced = false;
                   et_type =
                   (Rhint (root|deprecated.php line 14, characters 27-30),
                    (Tprim Tvoid))
                   };
                 ft_flags =
                 (make_ft_flags FSync None ~return_disposable:false
                   ~returns_mutable:false ~returns_void_to_rx:false);
                 ft_reactive = Nonreactive; ft_ifc_decl = FDPolicied {PUBLIC}
                 }));
           sm_visibility = Public;
           sm_deprecated =
           (Some "The method foo2 is deprecated: use bar2() instead") }
         ];
       sc_user_attributes = []; sc_enum_type = None }));
  ("\\foo",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated =
        (Some "The function foo is deprecated: use bar() instead");
        fe_type =
        (Rwitness (root|deprecated.php line 18, characters 10-12),
         (Tfun
            { ft_arity = (Fstandard ()); ft_tparams = [];
              ft_where_constraints = []; ft_params = [];
              ft_implicit_params =
              { capability =
                (Rhint (root|deprecated.php line 18, characters 10-12),
                 (Tapply (([18:10-13], "\\HH\\Contexts\\defaults"), [])))
                };
              ft_ret =
              { et_enforced = false;
                et_type =
                (Rhint (root|deprecated.php line 18, characters 17-20),
                 (Tprim Tvoid))
                };
              ft_flags =
              (make_ft_flags FSync None ~return_disposable:false
                ~returns_mutable:false ~returns_void_to_rx:false);
              ft_reactive = Nonreactive; ft_ifc_decl = FDPolicied {PUBLIC} }));
        fe_pos = [18:10-13]; fe_php_std_lib = false }));
  ("\\bar",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None;
        fe_type =
        (Rwitness (root|deprecated.php line 21, characters 10-12),
         (Tfun
            { ft_arity = (Fstandard ()); ft_tparams = [];
              ft_where_constraints = []; ft_params = [];
              ft_implicit_params =
              { capability =
                (Rhint (root|deprecated.php line 21, characters 10-12),
                 (Tapply (([21:10-13], "\\HH\\Contexts\\defaults"), [])))
                };
              ft_ret =
              { et_enforced = false;
                et_type =
                (Rhint (root|deprecated.php line 21, characters 17-20),
                 (Tprim Tvoid))
                };
              ft_flags =
              (make_ft_flags FSync None ~return_disposable:false
                ~returns_mutable:false ~returns_void_to_rx:false);
              ft_reactive = Nonreactive; ft_ifc_decl = FDPolicied {PUBLIC} }));
        fe_pos = [21:10-13]; fe_php_std_lib = false }));
  ("\\baz",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated = None;
        fe_type =
        (Rwitness (root|deprecated.php line 24, characters 10-12),
         (Tfun
            { ft_arity = (Fstandard ()); ft_tparams = [];
              ft_where_constraints = []; ft_params = [];
              ft_implicit_params =
              { capability =
                (Rhint (root|deprecated.php line 24, characters 10-12),
                 (Tapply (([24:10-13], "\\HH\\Contexts\\defaults"), [])))
                };
              ft_ret =
              { et_enforced = false;
                et_type =
                (Rhint (root|deprecated.php line 24, characters 17-20),
                 (Tprim Tvoid))
                };
              ft_flags =
              (make_ft_flags FSync None ~return_disposable:false
                ~returns_mutable:false ~returns_void_to_rx:false);
              ft_reactive = Nonreactive; ft_ifc_decl = FDPolicied {PUBLIC} }));
        fe_pos = [24:10-13]; fe_php_std_lib = false }));
  ("\\foo2",
   (Shallow_decl_defs.Fun
      { Typing_defs.fe_deprecated =
        (Some "The function foo2 is deprecated: use bar2() instead");
        fe_type =
        (Rwitness (root|deprecated.php line 27, characters 10-13),
         (Tfun
            { ft_arity = (Fstandard ()); ft_tparams = [];
              ft_where_constraints = []; ft_params = [];
              ft_implicit_params =
              { capability =
                (Rhint (root|deprecated.php line 27, characters 10-13),
                 (Tapply (([27:10-14], "\\HH\\Contexts\\defaults"), [])))
                };
              ft_ret =
              { et_enforced = false;
                et_type =
                (Rhint (root|deprecated.php line 27, characters 18-21),
                 (Tprim Tvoid))
                };
              ft_flags =
              (make_ft_flags FSync None ~return_disposable:false
                ~returns_mutable:false ~returns_void_to_rx:false);
              ft_reactive = Nonreactive; ft_ifc_decl = FDPolicied {PUBLIC} }));
        fe_pos = [27:10-14]; fe_php_std_lib = false }))
  ]

They matched!
