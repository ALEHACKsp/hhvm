Parsed decls:

{ Direct_decl_parser.classes =
  { "MyAbstractClass" ->
    { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cabstract;
      sc_name = ([32:16-31], "\\MyAbstractClass"); sc_tparams = [];
      sc_where_constraints = []; sc_extends = []; sc_uses = [];
      sc_method_redeclarations = []; sc_xhp_attr_uses = [];
      sc_req_extends = []; sc_req_implements = []; sc_implements = [];
      sc_consts = []; sc_typeconsts = []; sc_pu_enums = []; sc_props = [];
      sc_sprops = []; sc_constructor = None; sc_static_methods = [];
      sc_methods = []; sc_user_attributes = []; sc_enum_type = None;
      sc_decl_errors = <opaque> };
    "MyClass" ->
    { Shallow_decl_defs.sc_mode = Mstrict; sc_final = false;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cnormal;
      sc_name = ([3:7-14], "\\MyClass"); sc_tparams = [];
      sc_where_constraints = []; sc_extends = []; sc_uses = [];
      sc_method_redeclarations = []; sc_xhp_attr_uses = [];
      sc_req_extends = []; sc_req_implements = []; sc_implements = [];
      sc_consts = []; sc_typeconsts = []; sc_pu_enums = [];
      sc_props =
      [{ Shallow_decl_defs.sp_const = false; sp_xhp_attr = None;
         sp_lateinit = false; sp_lsb = false;
         sp_name = ([5:17-34], "instanceProperty"); sp_needs_init = true;
         sp_type =
         (Some (Rhint (root|classes.php line 5, characters 10-15),
                (Tprim Tstring)));
         sp_abstract = false; sp_visibility = Public; sp_fixme_codes = {} };
        { Shallow_decl_defs.sp_const = false; sp_xhp_attr = None;
          sp_lateinit = false; sp_lsb = false;
          sp_name = ([6:17-35], "protectedProperty"); sp_needs_init = true;
          sp_type =
          (Some (Rhint (root|classes.php line 6, characters 13-15),
                 (Tprim Tint)));
          sp_abstract = false; sp_visibility = Protected; sp_fixme_codes = {}
          };
        { Shallow_decl_defs.sp_const = false; sp_xhp_attr = None;
          sp_lateinit = true; sp_lsb = false; sp_name = ([7:34-36], "p");
          sp_needs_init = true;
          sp_type =
          (Some (Rhint (root|classes.php line 7, characters 25-32),
                 (Tprim Tarraykey)));
          sp_abstract = false; sp_visibility = Public; sp_fixme_codes = {} }
        ];
      sc_sprops =
      [{ Shallow_decl_defs.sp_const = false; sp_xhp_attr = None;
         sp_lateinit = false; sp_lsb = false;
         sp_name = ([4:25-40], "$staticProperty"); sp_needs_init = true;
         sp_type =
         (Some (Rhint (root|classes.php line 4, characters 18-23),
                (Tprim Tstring)));
         sp_abstract = false; sp_visibility = Private; sp_fixme_codes = {} }
        ];
      sc_constructor =
      (Some { Shallow_decl_defs.sm_abstract = false; sm_final = false;
              sm_memoizelsb = false; sm_name = ([9:19-30], "__construct");
              sm_override = false; sm_reactivity = None;
              sm_type =
              (Rwitness (root|classes.php line 9, characters 19-29),
               (Tfun
                  { ft_is_coroutine = false; ft_arity = (Fstandard (0, 0));
                    ft_tparams = []; ft_where_constraints = [];
                    ft_params = [];
                    ft_ret =
                    { et_enforced = false;
                      et_type =
                      (Rwitness (root|classes.php line 9, characters 19-29),
                       (Tprim Tvoid))
                      };
                    ft_fun_kind = sync; ft_reactive = Nonreactive;
                    ft_return_disposable = false; ft_mutable = none;
                    ft_returns_mutable = false }));
              sm_visibility = Public; sm_fixme_codes = {};
              sm_deprecated = None });
      sc_static_methods = [];
      sc_methods =
      [{ Shallow_decl_defs.sm_abstract = false; sm_final = false;
         sm_memoizelsb = false; sm_name = ([11:20-33], "privateMethod");
         sm_override = false; sm_reactivity = None;
         sm_type =
         (Rwitness (root|classes.php line 11, characters 20-32),
          (Tfun
             { ft_is_coroutine = false; ft_arity = (Fstandard (0, 0));
               ft_tparams = []; ft_where_constraints = []; ft_params = [];
               ft_ret =
               { et_enforced = false;
                 et_type =
                 (Rhint (root|classes.php line 11, characters 37-40),
                  (Tprim Tvoid))
                 };
               ft_fun_kind = sync; ft_reactive = Nonreactive;
               ft_return_disposable = false; ft_mutable = none;
               ft_returns_mutable = false }));
         sm_visibility = Private; sm_fixme_codes = {}; sm_deprecated = None };
        { Shallow_decl_defs.sm_abstract = false; sm_final = false;
          sm_memoizelsb = false; sm_name = ([12:19-31], "publicMethod");
          sm_override = false; sm_reactivity = None;
          sm_type =
          (Rwitness (root|classes.php line 12, characters 19-30),
           (Tfun
              { ft_is_coroutine = false; ft_arity = (Fstandard (0, 0));
                ft_tparams = []; ft_where_constraints = []; ft_params = [];
                ft_ret =
                { et_enforced = false;
                  et_type =
                  (Rhint (root|classes.php line 12, characters 35-38),
                   (Tprim Tvoid))
                  };
                ft_fun_kind = sync; ft_reactive = Nonreactive;
                ft_return_disposable = false; ft_mutable = none;
                ft_returns_mutable = false }));
          sm_visibility = Public; sm_fixme_codes = {}; sm_deprecated = None };
        { Shallow_decl_defs.sm_abstract = false; sm_final = false;
          sm_memoizelsb = false; sm_name = ([13:22-37], "protectedMethod");
          sm_override = false; sm_reactivity = None;
          sm_type =
          (Rwitness (root|classes.php line 13, characters 22-36),
           (Tfun
              { ft_is_coroutine = false; ft_arity = (Fstandard (0, 0));
                ft_tparams = []; ft_where_constraints = []; ft_params = [];
                ft_ret =
                { et_enforced = false;
                  et_type =
                  (Rhint (root|classes.php line 13, characters 41-44),
                   (Tprim Tvoid))
                  };
                ft_fun_kind = sync; ft_reactive = Nonreactive;
                ft_return_disposable = false; ft_mutable = none;
                ft_returns_mutable = false }));
          sm_visibility = Protected; sm_fixme_codes = {};
          sm_deprecated = None };
        { Shallow_decl_defs.sm_abstract = false; sm_final = false;
          sm_memoizelsb = false; sm_name = ([14:25-40], "async_generator");
          sm_override = false; sm_reactivity = None;
          sm_type =
          (Rwitness (root|classes.php line 14, characters 25-39),
           (Tfun
              { ft_is_coroutine = false; ft_arity = (Fstandard (2, 2));
                ft_tparams = []; ft_where_constraints = [];
                ft_params =
                [{ fp_pos = [15:12-17]; fp_name = (Some "$arg1");
                   fp_type =
                   { et_enforced = false;
                     et_type =
                     (Rhint (root|classes.php line 15, characters 5-10),
                      (Tprim Tstring))
                     };
                   fp_kind = FPnormal; fp_accept_disposable = false;
                   fp_mutable = none };
                  { fp_pos = [16:9-14]; fp_name = (Some "$arg2");
                    fp_type =
                    { et_enforced = false;
                      et_type =
                      (Rhint (root|classes.php line 16, characters 5-7),
                       (Tprim Tint))
                      };
                    fp_kind = FPnormal; fp_accept_disposable = false;
                    fp_mutable = none }
                  ];
                ft_ret =
                { et_enforced = false;
                  et_type =
                  (Rhint (root|classes.php line 17, characters 6-41),
                   (Tapply (([17:6-23], "\\HH\\AsyncGenerator"),
                      [(Rhint (root|classes.php line 17, characters 24-26),
                        (Tprim Tint));
                        (Rhint (root|classes.php line 17, characters 29-34),
                         (Tprim Tstring));
                        (Rhint (root|classes.php line 17, characters 37-40),
                         (Tprim Tvoid))
                        ]
                      )))
                  };
                ft_fun_kind = async generator; ft_reactive = Nonreactive;
                ft_return_disposable = false; ft_mutable = none;
                ft_returns_mutable = false }));
          sm_visibility = Public; sm_fixme_codes = {}; sm_deprecated = None };
        { Shallow_decl_defs.sm_abstract = false; sm_final = false;
          sm_memoizelsb = false; sm_name = ([23:19-36], "reactive_function");
          sm_override = false;
          sm_reactivity = (Some (Decl_defs.Method_reactive None));
          sm_type =
          (Rwitness (root|classes.php line 23, characters 19-35),
           (Tfun
              { ft_is_coroutine = false; ft_arity = (Fstandard (0, 0));
                ft_tparams = []; ft_where_constraints = []; ft_params = [];
                ft_ret =
                { et_enforced = false;
                  et_type =
                  (Rhint (root|classes.php line 23, characters 40-43),
                   (Tprim Tvoid))
                  };
                ft_fun_kind = sync; ft_reactive = Reactive {};
                ft_return_disposable = false; ft_mutable = none;
                ft_returns_mutable = false }));
          sm_visibility = Public; sm_fixme_codes = {}; sm_deprecated = None };
        { Shallow_decl_defs.sm_abstract = false; sm_final = false;
          sm_memoizelsb = false;
          sm_name = ([26:19-44], "shallow_reactive_function");
          sm_override = false;
          sm_reactivity = (Some (Decl_defs.Method_shallow None));
          sm_type =
          (Rwitness (root|classes.php line 26, characters 19-43),
           (Tfun
              { ft_is_coroutine = false; ft_arity = (Fstandard (0, 0));
                ft_tparams = []; ft_where_constraints = []; ft_params = [];
                ft_ret =
                { et_enforced = false;
                  et_type =
                  (Rhint (root|classes.php line 26, characters 48-51),
                   (Tprim Tvoid))
                  };
                ft_fun_kind = sync; ft_reactive = Shallow {};
                ft_return_disposable = false; ft_mutable = none;
                ft_returns_mutable = false }));
          sm_visibility = Public; sm_fixme_codes = {}; sm_deprecated = None };
        { Shallow_decl_defs.sm_abstract = false; sm_final = false;
          sm_memoizelsb = false;
          sm_name = ([29:19-42], "local_reactive_function");
          sm_override = false;
          sm_reactivity = (Some (Decl_defs.Method_local None));
          sm_type =
          (Rwitness (root|classes.php line 29, characters 19-41),
           (Tfun
              { ft_is_coroutine = false; ft_arity = (Fstandard (0, 0));
                ft_tparams = []; ft_where_constraints = []; ft_params = [];
                ft_ret =
                { et_enforced = false;
                  et_type =
                  (Rhint (root|classes.php line 29, characters 46-49),
                   (Tprim Tvoid))
                  };
                ft_fun_kind = sync; ft_reactive = Local {};
                ft_return_disposable = false; ft_mutable = none;
                ft_returns_mutable = false }));
          sm_visibility = Public; sm_fixme_codes = {}; sm_deprecated = None }
        ];
      sc_user_attributes = []; sc_enum_type = None; sc_decl_errors = <opaque>
      };
    "MyFinalClass" ->
    { Shallow_decl_defs.sc_mode = Mstrict; sc_final = true;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cnormal;
      sc_name = ([33:13-25], "\\MyFinalClass"); sc_tparams = [];
      sc_where_constraints = []; sc_extends = []; sc_uses = [];
      sc_method_redeclarations = []; sc_xhp_attr_uses = [];
      sc_req_extends = []; sc_req_implements = []; sc_implements = [];
      sc_consts = []; sc_typeconsts = []; sc_pu_enums = []; sc_props = [];
      sc_sprops = []; sc_constructor = None; sc_static_methods = [];
      sc_methods = []; sc_user_attributes = []; sc_enum_type = None;
      sc_decl_errors = <opaque> };
    "MyStaticClass" ->
    { Shallow_decl_defs.sc_mode = Mstrict; sc_final = true;
      sc_is_xhp = false; sc_has_xhp_keyword = false; sc_kind = Cabstract;
      sc_name = ([34:22-35], "\\MyStaticClass"); sc_tparams = [];
      sc_where_constraints = []; sc_extends = []; sc_uses = [];
      sc_method_redeclarations = []; sc_xhp_attr_uses = [];
      sc_req_extends = []; sc_req_implements = []; sc_implements = [];
      sc_consts = []; sc_typeconsts = []; sc_pu_enums = []; sc_props = [];
      sc_sprops = []; sc_constructor = None; sc_static_methods = [];
      sc_methods = []; sc_user_attributes = []; sc_enum_type = None;
      sc_decl_errors = <opaque> } };
  funs = {}; typedefs = {}; consts = {} }

They matched!
