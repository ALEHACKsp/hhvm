# Do not modify this test. Instead, once the emitter is capable of emitting
# pure functions update call_enforcement.php and call_enforcement_soft.php to
# also test pure functions (and delete this temporary, hacky test).

.hh_file 1;

.adata A_0 = """v:2:{s:2:\"rx\";s:4:\"pure\";}""";

.main (1,1) {
  Int 1
  RetC
}

.function [rx "__Rx"("""y:0:{}""")] (4,6) <"" N  > rx($fn) {
  CGetL $fn
  JmpZ L0
  .try {
    NullUninit
    NullUninit
    NullUninit
    CGetL $fn
    PopL _1
    Null
    PushL _1
    FCallFunc <> 1 1 "0" -
    Jmp L1
  } .catch {
    UnsetL _1
    Throw
  }
L1:
  PopC
L0:
  Null
  RetC
}

.function [pure "__Pure"("""y:0:{}""")] (9,11) <"" N  > pure($fn) {
  CGetL $fn
  JmpZ L0
  .try {
    NullUninit
    NullUninit
    NullUninit
    CGetL $fn
    PopL _1
    Null
    PushL _1
    FCallFunc <> 1 1 "0" -
    Jmp L1
  } .catch {
    UnsetL _1
    Throw
  }
L1:
  PopC
L0:
  Null
  RetC
}

.function ["__EntryPoint"("""y:0:{}""")] (14,26) <"" N  > main() {
  .numiters 2;
  .declvars $functions $caller $callee $e;
  Vec @A_0
  SetL $functions
  PopC
  CGetL $functions
  IterInit 0 NK V:$caller L0
  .try {
  L6:
    CGetL $functions
    IterInit 1 NK V:$callee L1
    .try {
      .try {
        .try {
        L5:
          NullUninit
          NullUninit
          NullUninit
          CGetL $caller
          PopL _4
          CGetL $callee
          PushL _4
          FCallFunc <> 1 1 "0" -
          Jmp L2
        } .catch {
          UnsetL _4
          Throw
        }
      L2:
        PopC
        String " -> "
        CGetL2 $caller
        Concat
        CGetL $callee
        Concat
        String ": ok\n"
        Concat
        Print
        PopC
        Jmp L3
      } .catch {
        Dup
        InstanceOfD "Exception"
        JmpZ L4
        SetL $e
        PopC
        String " -> "
        CGetL2 $caller
        Concat
        CGetL $callee
        Concat
        String ": "
        Concat
        CGetL $e
        NullUninit
        NullUninit
        FCallObjMethodD <> 0 1 "" - "" NullThrows "getMessage"
        Concat
        String "\n"
        Concat
        Print
        PopC
        Jmp L3
      L4:
        Throw
      }
    L3:
      IterNext 1 NK V:$callee L5
      Jmp L1
    } .catch {
      IterFree 1
      Throw
    }
  L1:
    IterNext 0 NK V:$caller L6
    Jmp L0
  } .catch {
    IterFree 0
    Throw
  }
L0:
  Null
  RetC
}
